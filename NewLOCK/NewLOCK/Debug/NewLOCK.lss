
NewLOCK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  000011ca  0000125e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  00800104  00800104  00001302  2**0
                  ALLOC
  3 .stab         00000f78  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000391  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  0000260d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000204  00000000  00000000  000026cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000160c  00000000  00000000  000028d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000776  00000000  00000000  00003edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000160f  00000000  00000000  00004653  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00005c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000482  00000000  00000000  00005e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c1c  00000000  00000000  000062c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000013a  00000000  00000000  00006ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_1>
       8:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 33       	cpi	r26, 0x37	; 55
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 04 	call	0x8a6	; 0x8a6 <main>
      8a:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_cmd>:
*******************************/
#include "lcd_lib.h"

void LCD_cmd(unsigned char cmd)
{
	LCD_DATA = cmd;
      92:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      94:	89 ef       	ldi	r24, 0xF9	; 249
      96:	90 e0       	ldi	r25, 0x00	; 0
      98:	01 97       	sbiw	r24, 0x01	; 1
      9a:	f1 f7       	brne	.-4      	; 0x98 <LCD_cmd+0x6>
      9c:	00 c0       	rjmp	.+0      	; 0x9e <LCD_cmd+0xc>
      9e:	00 00       	nop
	_delay_ms(1);
	ctrl = (0<<rs)|(0<<rw)|(1<<en);
      a0:	80 e2       	ldi	r24, 0x20	; 32
      a2:	82 bb       	out	0x12, r24	; 18
      a4:	89 ef       	ldi	r24, 0xF9	; 249
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	01 97       	sbiw	r24, 0x01	; 1
      aa:	f1 f7       	brne	.-4      	; 0xa8 <LCD_cmd+0x16>
      ac:	00 c0       	rjmp	.+0      	; 0xae <LCD_cmd+0x1c>
      ae:	00 00       	nop
	_delay_ms(1);
	ctrl = (0<<rs)|(0<<rw)|(0<<en);
      b0:	12 ba       	out	0x12, r1	; 18
      b2:	83 ec       	ldi	r24, 0xC3	; 195
      b4:	99 e0       	ldi	r25, 0x09	; 9
      b6:	01 97       	sbiw	r24, 0x01	; 1
      b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_cmd+0x24>
      ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_cmd+0x2a>
      bc:	00 00       	nop
	_delay_ms(10);
}
      be:	08 95       	ret

000000c0 <LCD4_cmd>:

void LCD4_cmd(unsigned char cmd)
{
      c0:	1f 93       	push	r17
      c2:	18 2f       	mov	r17, r24
	unsigned char value;
	value = (cmd & 0xf0);
	LCD_cmd(value);
      c4:	80 7f       	andi	r24, 0xF0	; 240
      c6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
      ca:	89 ef       	ldi	r24, 0xF9	; 249
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	01 97       	sbiw	r24, 0x01	; 1
      d0:	f1 f7       	brne	.-4      	; 0xce <LCD4_cmd+0xe>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD4_cmd+0x14>
      d4:	00 00       	nop
	_delay_ms(1);
	value = ((cmd<<4) & 0xf0);
	LCD_cmd(value);
      d6:	81 2f       	mov	r24, r17
      d8:	82 95       	swap	r24
      da:	80 7f       	andi	r24, 0xF0	; 240
      dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
      e0:	89 ef       	ldi	r24, 0xF9	; 249
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	01 97       	sbiw	r24, 0x01	; 1
      e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD4_cmd+0x24>
      e8:	00 c0       	rjmp	.+0      	; 0xea <LCD4_cmd+0x2a>
      ea:	00 00       	nop
	_delay_ms(1);
}
      ec:	1f 91       	pop	r17
      ee:	08 95       	ret

000000f0 <LCD_init>:

void LCD_init()
{
	LCD_cmd(0x38);
      f0:	88 e3       	ldi	r24, 0x38	; 56
      f2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
      f6:	89 ef       	ldi	r24, 0xF9	; 249
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	01 97       	sbiw	r24, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_init+0xa>
      fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_init+0x10>
     100:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x01);
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
     108:	89 ef       	ldi	r24, 0xF9	; 249
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	01 97       	sbiw	r24, 0x01	; 1
     10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_init+0x1c>
     110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_init+0x22>
     112:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x0E);
     114:	8e e0       	ldi	r24, 0x0E	; 14
     116:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
     11a:	89 ef       	ldi	r24, 0xF9	; 249
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	01 97       	sbiw	r24, 0x01	; 1
     120:	f1 f7       	brne	.-4      	; 0x11e <LCD_init+0x2e>
     122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_init+0x34>
     124:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x80);
     126:	80 e8       	ldi	r24, 0x80	; 128
     128:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
     12c:	89 ef       	ldi	r24, 0xF9	; 249
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <LCD_init+0x40>
     134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_init+0x46>
     136:	00 00       	nop
	_delay_ms(1);
}
     138:	08 95       	ret

0000013a <LCD4_init>:

void LCD4_init()
{
	LCD4_cmd(0x02);
     13a:	82 e0       	ldi	r24, 0x02	; 2
     13c:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd>
     140:	89 ef       	ldi	r24, 0xF9	; 249
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <LCD4_init+0xa>
     148:	00 c0       	rjmp	.+0      	; 0x14a <LCD4_init+0x10>
     14a:	00 00       	nop
	_delay_ms(1);
	LCD4_cmd(0x28);
     14c:	88 e2       	ldi	r24, 0x28	; 40
     14e:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd>
     152:	89 ef       	ldi	r24, 0xF9	; 249
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	01 97       	sbiw	r24, 0x01	; 1
     158:	f1 f7       	brne	.-4      	; 0x156 <LCD4_init+0x1c>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD4_init+0x22>
     15c:	00 00       	nop
	_delay_ms(1);
	LCD4_cmd(0x0c);
     15e:	8c e0       	ldi	r24, 0x0C	; 12
     160:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd>
     164:	89 ef       	ldi	r24, 0xF9	; 249
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	f1 f7       	brne	.-4      	; 0x168 <LCD4_init+0x2e>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD4_init+0x34>
     16e:	00 00       	nop
	_delay_ms(1);
	LCD4_cmd(0x06);
     170:	86 e0       	ldi	r24, 0x06	; 6
     172:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd>
     176:	89 ef       	ldi	r24, 0xF9	; 249
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	f1 f7       	brne	.-4      	; 0x17a <LCD4_init+0x40>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD4_init+0x46>
     180:	00 00       	nop
	_delay_ms(1);
	LCD4_cmd(0x80);
     182:	80 e8       	ldi	r24, 0x80	; 128
     184:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd>
     188:	89 ef       	ldi	r24, 0xF9	; 249
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	01 97       	sbiw	r24, 0x01	; 1
     18e:	f1 f7       	brne	.-4      	; 0x18c <LCD4_init+0x52>
     190:	00 c0       	rjmp	.+0      	; 0x192 <LCD4_init+0x58>
     192:	00 00       	nop
	_delay_ms(1);
}
     194:	08 95       	ret

00000196 <LCD_write>:

void LCD_write(unsigned char data)
{
	LCD_DATA = data;
     196:	85 bb       	out	0x15, r24	; 21
	ctrl = (1<<rs)|(0<<rw)|(1<<en);
     198:	80 ea       	ldi	r24, 0xA0	; 160
     19a:	82 bb       	out	0x12, r24	; 18
     19c:	89 ef       	ldi	r24, 0xF9	; 249
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_write+0xa>
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_write+0x10>
     1a6:	00 00       	nop
	_delay_ms(1);
	ctrl = (1<<rs)|(0<<rw)|(0<<en);
     1a8:	80 e8       	ldi	r24, 0x80	; 128
     1aa:	82 bb       	out	0x12, r24	; 18
     1ac:	83 ec       	ldi	r24, 0xC3	; 195
     1ae:	99 e0       	ldi	r25, 0x09	; 9
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_write+0x1a>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_write+0x20>
     1b6:	00 00       	nop
	_delay_ms(10);
}
     1b8:	08 95       	ret

000001ba <LCD4_write>:

void LCD4_write(unsigned char data)
{
     1ba:	1f 93       	push	r17
     1bc:	18 2f       	mov	r17, r24
	unsigned char value;
	value = (data & 0xf0);
	LCD_write(value);
     1be:	80 7f       	andi	r24, 0xF0	; 240
     1c0:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_write>
     1c4:	89 ef       	ldi	r24, 0xF9	; 249
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCD4_write+0xe>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <LCD4_write+0x14>
     1ce:	00 00       	nop
	_delay_ms(1);
	value = ((data<<4) & 0xf0);
	LCD_write(value);
     1d0:	81 2f       	mov	r24, r17
     1d2:	82 95       	swap	r24
     1d4:	80 7f       	andi	r24, 0xF0	; 240
     1d6:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_write>
     1da:	89 ef       	ldi	r24, 0xF9	; 249
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD4_write+0x24>
     1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCD4_write+0x2a>
     1e4:	00 00       	nop
	_delay_ms(1);
}
     1e6:	1f 91       	pop	r17
     1e8:	08 95       	ret

000001ea <LCD_write_string>:

void LCD_write_string(unsigned char *data)
{
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	8c 01       	movw	r16, r24
	int n=0;
     1f4:	c0 e0       	ldi	r28, 0x00	; 0
     1f6:	d0 e0       	ldi	r29, 0x00	; 0
	while(data[n])
     1f8:	09 c0       	rjmp	.+18     	; 0x20c <LCD_write_string+0x22>
	{
		LCD_write(data[n]);
     1fa:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_write>
		n++;
     1fe:	21 96       	adiw	r28, 0x01	; 1
		if (n==16)
     200:	c0 31       	cpi	r28, 0x10	; 16
     202:	d1 05       	cpc	r29, r1
     204:	19 f4       	brne	.+6      	; 0x20c <LCD_write_string+0x22>
		{
			LCD_cmd(0xC0);
     206:	80 ec       	ldi	r24, 0xC0	; 192
     208:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
}

void LCD_write_string(unsigned char *data)
{
	int n=0;
	while(data[n])
     20c:	f8 01       	movw	r30, r16
     20e:	ec 0f       	add	r30, r28
     210:	fd 1f       	adc	r31, r29
     212:	80 81       	ld	r24, Z
     214:	88 23       	and	r24, r24
     216:	89 f7       	brne	.-30     	; 0x1fa <LCD_write_string+0x10>
		if (n==16)
		{
			LCD_cmd(0xC0);
		}
	}
}
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	1f 91       	pop	r17
     21e:	0f 91       	pop	r16
     220:	08 95       	ret

00000222 <LCD4_write_string>:

void LCD4_write_string(unsigned char *data)
{
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	8c 01       	movw	r16, r24
	int n=0;
     22c:	c0 e0       	ldi	r28, 0x00	; 0
     22e:	d0 e0       	ldi	r29, 0x00	; 0
	while(data[n])
     230:	09 c0       	rjmp	.+18     	; 0x244 <LCD4_write_string+0x22>
	{
		LCD4_write(data[n]);
     232:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD4_write>
		n++;
     236:	21 96       	adiw	r28, 0x01	; 1
		if (n==16)
     238:	c0 31       	cpi	r28, 0x10	; 16
     23a:	d1 05       	cpc	r29, r1
     23c:	19 f4       	brne	.+6      	; 0x244 <LCD4_write_string+0x22>
		{
			LCD4_cmd(0xC0);
     23e:	80 ec       	ldi	r24, 0xC0	; 192
     240:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd>
}

void LCD4_write_string(unsigned char *data)
{
	int n=0;
	while(data[n])
     244:	f8 01       	movw	r30, r16
     246:	ec 0f       	add	r30, r28
     248:	fd 1f       	adc	r31, r29
     24a:	80 81       	ld	r24, Z
     24c:	88 23       	and	r24, r24
     24e:	89 f7       	brne	.-30     	; 0x232 <LCD4_write_string+0x10>
		if (n==16)
		{
			LCD4_cmd(0xC0);
		}
	}
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	08 95       	ret

0000025a <LCD_gotoxy>:

void LCD_gotoxy(int x, int y)
{
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	ec 01       	movw	r28, r24
     264:	8b 01       	movw	r16, r22
	if (x==1)
     266:	81 30       	cpi	r24, 0x01	; 1
     268:	91 05       	cpc	r25, r1
     26a:	81 f4       	brne	.+32     	; 0x28c <LCD_gotoxy+0x32>
	{
		LCD_cmd(0x80);
     26c:	80 e8       	ldi	r24, 0x80	; 128
     26e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
		for (int i=1;i<y;i++)
     272:	02 30       	cpi	r16, 0x02	; 2
     274:	11 05       	cpc	r17, r1
     276:	54 f0       	brlt	.+20     	; 0x28c <LCD_gotoxy+0x32>
     278:	c1 e0       	ldi	r28, 0x01	; 1
     27a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			LCD_cmd(0x06);
     27c:	86 e0       	ldi	r24, 0x06	; 6
     27e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
void LCD_gotoxy(int x, int y)
{
	if (x==1)
	{
		LCD_cmd(0x80);
		for (int i=1;i<y;i++)
     282:	21 96       	adiw	r28, 0x01	; 1
     284:	c0 17       	cp	r28, r16
     286:	d1 07       	cpc	r29, r17
     288:	cc f3       	brlt	.-14     	; 0x27c <LCD_gotoxy+0x22>
     28a:	12 c0       	rjmp	.+36     	; 0x2b0 <LCD_gotoxy+0x56>
		{
			LCD_cmd(0x06);
		}
	}
	if (x==2)
     28c:	c2 30       	cpi	r28, 0x02	; 2
     28e:	d1 05       	cpc	r29, r1
     290:	79 f4       	brne	.+30     	; 0x2b0 <LCD_gotoxy+0x56>
	{
		LCD_cmd(0xC0);
     292:	80 ec       	ldi	r24, 0xC0	; 192
     294:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
		for (int i=1;i<y;i++)
     298:	02 30       	cpi	r16, 0x02	; 2
     29a:	11 05       	cpc	r17, r1
     29c:	4c f0       	brlt	.+18     	; 0x2b0 <LCD_gotoxy+0x56>
     29e:	c1 e0       	ldi	r28, 0x01	; 1
     2a0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			LCD_cmd(0x06);
     2a2:	86 e0       	ldi	r24, 0x06	; 6
     2a4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
		}
	}
	if (x==2)
	{
		LCD_cmd(0xC0);
		for (int i=1;i<y;i++)
     2a8:	21 96       	adiw	r28, 0x01	; 1
     2aa:	c0 17       	cp	r28, r16
     2ac:	d1 07       	cpc	r29, r17
     2ae:	cc f3       	brlt	.-14     	; 0x2a2 <LCD_gotoxy+0x48>
		{
			LCD_cmd(0x06);
		}
	}
}
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	08 95       	ret

000002ba <LCD4_gotoxy>:

void LCD4_gotoxy(int x, int y)
{
	y--;
     2ba:	61 50       	subi	r22, 0x01	; 1
     2bc:	70 40       	sbci	r23, 0x00	; 0
	if (x==1)
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	91 05       	cpc	r25, r1
     2c2:	29 f4       	brne	.+10     	; 0x2ce <LCD4_gotoxy+0x14>
	{
		LCD4_cmd(0x80+y);
     2c4:	86 2f       	mov	r24, r22
     2c6:	80 58       	subi	r24, 0x80	; 128
     2c8:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd>
     2cc:	08 95       	ret
	}
	if (x==2)
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	91 05       	cpc	r25, r1
     2d2:	21 f4       	brne	.+8      	; 0x2dc <LCD4_gotoxy+0x22>
	{
		LCD4_cmd(0xC0+y);
     2d4:	86 2f       	mov	r24, r22
     2d6:	80 54       	subi	r24, 0x40	; 64
     2d8:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd>
     2dc:	08 95       	ret

000002de <LCD_clear>:
	}
}

void LCD_clear()
{
	LCD_cmd(0x01);
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
}
     2e4:	08 95       	ret

000002e6 <LCD4_clear>:

void LCD4_clear()
{
	LCD4_cmd(0x01);
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD4_cmd>
}
     2ec:	08 95       	ret

000002ee <__vector_1>:
unsigned char vib = 0;
char buf_lcd1[16];
char buf_lcd2[16];
char buf_lcd3[16];
ISR(INT0_vect)
{   
     2ee:	1f 92       	push	r1
     2f0:	0f 92       	push	r0
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	0f 92       	push	r0
     2f6:	11 24       	eor	r1, r1
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	2f 93       	push	r18
     2fe:	3f 93       	push	r19
     300:	4f 93       	push	r20
     302:	5f 93       	push	r21
     304:	6f 93       	push	r22
     306:	7f 93       	push	r23
     308:	8f 93       	push	r24
     30a:	9f 93       	push	r25
     30c:	af 93       	push	r26
     30e:	bf 93       	push	r27
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	ef 93       	push	r30
     316:	ff 93       	push	r31
	unsigned char temp;
	//read the 74C922 outputs
	temp=PINC&0x0F;
     318:	83 b3       	in	r24, 0x13	; 19
     31a:	8f 70       	andi	r24, 0x0F	; 15
	//Determine what key
	if(temp==7)
     31c:	87 30       	cpi	r24, 0x07	; 7
     31e:	c1 f5       	brne	.+112    	; 0x390 <__vector_1+0xa2>
	{
		key = 0;
     320:	10 92 06 01 	sts	0x0106, r1
     324:	10 92 05 01 	sts	0x0105, r1
		sprintf(buf_lcd1, "%1d",key);
     328:	00 d0       	rcall	.+0      	; 0x32a <__vector_1+0x3c>
     32a:	00 d0       	rcall	.+0      	; 0x32c <__vector_1+0x3e>
     32c:	00 d0       	rcall	.+0      	; 0x32e <__vector_1+0x40>
     32e:	ed b7       	in	r30, 0x3d	; 61
     330:	fe b7       	in	r31, 0x3e	; 62
     332:	31 96       	adiw	r30, 0x01	; 1
     334:	c7 e1       	ldi	r28, 0x17	; 23
     336:	d1 e0       	ldi	r29, 0x01	; 1
     338:	ad b7       	in	r26, 0x3d	; 61
     33a:	be b7       	in	r27, 0x3e	; 62
     33c:	12 96       	adiw	r26, 0x02	; 2
     33e:	dc 93       	st	X, r29
     340:	ce 93       	st	-X, r28
     342:	11 97       	sbiw	r26, 0x01	; 1
     344:	80 e6       	ldi	r24, 0x60	; 96
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	93 83       	std	Z+3, r25	; 0x03
     34a:	82 83       	std	Z+2, r24	; 0x02
     34c:	15 82       	std	Z+5, r1	; 0x05
     34e:	14 82       	std	Z+4, r1	; 0x04
     350:	0e 94 02 06 	call	0xc04	; 0xc04 <sprintf>
		strcat(buf_lcd2,buf_lcd1);
     354:	8d b7       	in	r24, 0x3d	; 61
     356:	9e b7       	in	r25, 0x3e	; 62
     358:	06 96       	adiw	r24, 0x06	; 6
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	9e bf       	out	0x3e, r25	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	8d bf       	out	0x3d, r24	; 61
     364:	07 e2       	ldi	r16, 0x27	; 39
     366:	11 e0       	ldi	r17, 0x01	; 1
     368:	c8 01       	movw	r24, r16
     36a:	be 01       	movw	r22, r28
     36c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <strcat>
		LCD4_gotoxy(2,1);
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	61 e0       	ldi	r22, 0x01	; 1
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
     37c:	a3 ec       	ldi	r26, 0xC3	; 195
     37e:	b9 e0       	ldi	r27, 0x09	; 9
     380:	11 97       	sbiw	r26, 0x01	; 1
     382:	f1 f7       	brne	.-4      	; 0x380 <__vector_1+0x92>
     384:	00 c0       	rjmp	.+0      	; 0x386 <__vector_1+0x98>
     386:	00 00       	nop
		_delay_ms(10);
		LCD4_write_string(buf_lcd2);
     388:	c8 01       	movw	r24, r16
     38a:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
     38e:	0b c2       	rjmp	.+1046   	; 0x7a6 <__vector_1+0x4b8>
	}
	else if(temp==2)
     390:	82 30       	cpi	r24, 0x02	; 2
     392:	a1 f5       	brne	.+104    	; 0x3fc <__vector_1+0x10e>
	{
		key = 1;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	90 93 06 01 	sts	0x0106, r25
     39c:	80 93 05 01 	sts	0x0105, r24
		sprintf(buf_lcd1, "%1d",key);
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <__vector_1+0xb4>
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <__vector_1+0xb6>
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <__vector_1+0xb8>
     3a6:	ed b7       	in	r30, 0x3d	; 61
     3a8:	fe b7       	in	r31, 0x3e	; 62
     3aa:	31 96       	adiw	r30, 0x01	; 1
     3ac:	c7 e1       	ldi	r28, 0x17	; 23
     3ae:	d1 e0       	ldi	r29, 0x01	; 1
     3b0:	ad b7       	in	r26, 0x3d	; 61
     3b2:	be b7       	in	r27, 0x3e	; 62
     3b4:	12 96       	adiw	r26, 0x02	; 2
     3b6:	dc 93       	st	X, r29
     3b8:	ce 93       	st	-X, r28
     3ba:	11 97       	sbiw	r26, 0x01	; 1
     3bc:	20 e6       	ldi	r18, 0x60	; 96
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	33 83       	std	Z+3, r19	; 0x03
     3c2:	22 83       	std	Z+2, r18	; 0x02
     3c4:	95 83       	std	Z+5, r25	; 0x05
     3c6:	84 83       	std	Z+4, r24	; 0x04
     3c8:	0e 94 02 06 	call	0xc04	; 0xc04 <sprintf>
		strcat(buf_lcd2,buf_lcd1);
     3cc:	8d b7       	in	r24, 0x3d	; 61
     3ce:	9e b7       	in	r25, 0x3e	; 62
     3d0:	06 96       	adiw	r24, 0x06	; 6
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	9e bf       	out	0x3e, r25	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	8d bf       	out	0x3d, r24	; 61
     3dc:	07 e2       	ldi	r16, 0x27	; 39
     3de:	11 e0       	ldi	r17, 0x01	; 1
     3e0:	c8 01       	movw	r24, r16
     3e2:	be 01       	movw	r22, r28
     3e4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <strcat>
		LCD4_gotoxy(2,1);
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
		LCD4_write_string(buf_lcd2);
     3f4:	c8 01       	movw	r24, r16
     3f6:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
     3fa:	d5 c1       	rjmp	.+938    	; 0x7a6 <__vector_1+0x4b8>
	}	
	else if(temp==6)
     3fc:	86 30       	cpi	r24, 0x06	; 6
     3fe:	a1 f5       	brne	.+104    	; 0x468 <__vector_1+0x17a>
	{
		key = 2;
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	90 93 06 01 	sts	0x0106, r25
     408:	80 93 05 01 	sts	0x0105, r24
		sprintf(buf_lcd1, "%1d",key);
     40c:	00 d0       	rcall	.+0      	; 0x40e <__vector_1+0x120>
     40e:	00 d0       	rcall	.+0      	; 0x410 <__vector_1+0x122>
     410:	00 d0       	rcall	.+0      	; 0x412 <__vector_1+0x124>
     412:	ed b7       	in	r30, 0x3d	; 61
     414:	fe b7       	in	r31, 0x3e	; 62
     416:	31 96       	adiw	r30, 0x01	; 1
     418:	c7 e1       	ldi	r28, 0x17	; 23
     41a:	d1 e0       	ldi	r29, 0x01	; 1
     41c:	ad b7       	in	r26, 0x3d	; 61
     41e:	be b7       	in	r27, 0x3e	; 62
     420:	12 96       	adiw	r26, 0x02	; 2
     422:	dc 93       	st	X, r29
     424:	ce 93       	st	-X, r28
     426:	11 97       	sbiw	r26, 0x01	; 1
     428:	20 e6       	ldi	r18, 0x60	; 96
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	33 83       	std	Z+3, r19	; 0x03
     42e:	22 83       	std	Z+2, r18	; 0x02
     430:	95 83       	std	Z+5, r25	; 0x05
     432:	84 83       	std	Z+4, r24	; 0x04
     434:	0e 94 02 06 	call	0xc04	; 0xc04 <sprintf>
		strcat(buf_lcd2,buf_lcd1);
     438:	8d b7       	in	r24, 0x3d	; 61
     43a:	9e b7       	in	r25, 0x3e	; 62
     43c:	06 96       	adiw	r24, 0x06	; 6
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	9e bf       	out	0x3e, r25	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	8d bf       	out	0x3d, r24	; 61
     448:	07 e2       	ldi	r16, 0x27	; 39
     44a:	11 e0       	ldi	r17, 0x01	; 1
     44c:	c8 01       	movw	r24, r16
     44e:	be 01       	movw	r22, r28
     450:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <strcat>
		LCD4_gotoxy(2,1);
     454:	82 e0       	ldi	r24, 0x02	; 2
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
		LCD4_write_string(buf_lcd2);
     460:	c8 01       	movw	r24, r16
     462:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
     466:	9f c1       	rjmp	.+830    	; 0x7a6 <__vector_1+0x4b8>
	}		
	else if(temp==10)
     468:	8a 30       	cpi	r24, 0x0A	; 10
     46a:	a1 f5       	brne	.+104    	; 0x4d4 <__vector_1+0x1e6>
	{
		key = 3;
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	90 93 06 01 	sts	0x0106, r25
     474:	80 93 05 01 	sts	0x0105, r24
		sprintf(buf_lcd1, "%1d",key);
     478:	00 d0       	rcall	.+0      	; 0x47a <__vector_1+0x18c>
     47a:	00 d0       	rcall	.+0      	; 0x47c <__vector_1+0x18e>
     47c:	00 d0       	rcall	.+0      	; 0x47e <__vector_1+0x190>
     47e:	ed b7       	in	r30, 0x3d	; 61
     480:	fe b7       	in	r31, 0x3e	; 62
     482:	31 96       	adiw	r30, 0x01	; 1
     484:	c7 e1       	ldi	r28, 0x17	; 23
     486:	d1 e0       	ldi	r29, 0x01	; 1
     488:	ad b7       	in	r26, 0x3d	; 61
     48a:	be b7       	in	r27, 0x3e	; 62
     48c:	12 96       	adiw	r26, 0x02	; 2
     48e:	dc 93       	st	X, r29
     490:	ce 93       	st	-X, r28
     492:	11 97       	sbiw	r26, 0x01	; 1
     494:	20 e6       	ldi	r18, 0x60	; 96
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	33 83       	std	Z+3, r19	; 0x03
     49a:	22 83       	std	Z+2, r18	; 0x02
     49c:	95 83       	std	Z+5, r25	; 0x05
     49e:	84 83       	std	Z+4, r24	; 0x04
     4a0:	0e 94 02 06 	call	0xc04	; 0xc04 <sprintf>
		strcat(buf_lcd2,buf_lcd1);
     4a4:	8d b7       	in	r24, 0x3d	; 61
     4a6:	9e b7       	in	r25, 0x3e	; 62
     4a8:	06 96       	adiw	r24, 0x06	; 6
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	9e bf       	out	0x3e, r25	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	8d bf       	out	0x3d, r24	; 61
     4b4:	07 e2       	ldi	r16, 0x27	; 39
     4b6:	11 e0       	ldi	r17, 0x01	; 1
     4b8:	c8 01       	movw	r24, r16
     4ba:	be 01       	movw	r22, r28
     4bc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <strcat>
		LCD4_gotoxy(2,1);
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
		LCD4_write_string(buf_lcd2);
     4cc:	c8 01       	movw	r24, r16
     4ce:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
     4d2:	69 c1       	rjmp	.+722    	; 0x7a6 <__vector_1+0x4b8>
	}	
	else if(temp==1)
     4d4:	81 30       	cpi	r24, 0x01	; 1
     4d6:	a1 f5       	brne	.+104    	; 0x540 <__vector_1+0x252>
	{
		key = 4;
     4d8:	84 e0       	ldi	r24, 0x04	; 4
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	90 93 06 01 	sts	0x0106, r25
     4e0:	80 93 05 01 	sts	0x0105, r24
		sprintf(buf_lcd1, "%1d",key);
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <__vector_1+0x1f8>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <__vector_1+0x1fa>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <__vector_1+0x1fc>
     4ea:	ed b7       	in	r30, 0x3d	; 61
     4ec:	fe b7       	in	r31, 0x3e	; 62
     4ee:	31 96       	adiw	r30, 0x01	; 1
     4f0:	c7 e1       	ldi	r28, 0x17	; 23
     4f2:	d1 e0       	ldi	r29, 0x01	; 1
     4f4:	ad b7       	in	r26, 0x3d	; 61
     4f6:	be b7       	in	r27, 0x3e	; 62
     4f8:	12 96       	adiw	r26, 0x02	; 2
     4fa:	dc 93       	st	X, r29
     4fc:	ce 93       	st	-X, r28
     4fe:	11 97       	sbiw	r26, 0x01	; 1
     500:	20 e6       	ldi	r18, 0x60	; 96
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	33 83       	std	Z+3, r19	; 0x03
     506:	22 83       	std	Z+2, r18	; 0x02
     508:	95 83       	std	Z+5, r25	; 0x05
     50a:	84 83       	std	Z+4, r24	; 0x04
     50c:	0e 94 02 06 	call	0xc04	; 0xc04 <sprintf>
		strcat(buf_lcd2,buf_lcd1);
     510:	8d b7       	in	r24, 0x3d	; 61
     512:	9e b7       	in	r25, 0x3e	; 62
     514:	06 96       	adiw	r24, 0x06	; 6
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	9e bf       	out	0x3e, r25	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	8d bf       	out	0x3d, r24	; 61
     520:	07 e2       	ldi	r16, 0x27	; 39
     522:	11 e0       	ldi	r17, 0x01	; 1
     524:	c8 01       	movw	r24, r16
     526:	be 01       	movw	r22, r28
     528:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <strcat>
		LCD4_gotoxy(2,1);
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
		LCD4_write_string(buf_lcd2);
     538:	c8 01       	movw	r24, r16
     53a:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
     53e:	33 c1       	rjmp	.+614    	; 0x7a6 <__vector_1+0x4b8>
	}	
	else if(temp==5)
     540:	85 30       	cpi	r24, 0x05	; 5
     542:	a1 f5       	brne	.+104    	; 0x5ac <__vector_1+0x2be>
	{
		key = 5;
     544:	85 e0       	ldi	r24, 0x05	; 5
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	90 93 06 01 	sts	0x0106, r25
     54c:	80 93 05 01 	sts	0x0105, r24
		sprintf(buf_lcd1, "%1d",key);
     550:	00 d0       	rcall	.+0      	; 0x552 <__vector_1+0x264>
     552:	00 d0       	rcall	.+0      	; 0x554 <__vector_1+0x266>
     554:	00 d0       	rcall	.+0      	; 0x556 <__vector_1+0x268>
     556:	ed b7       	in	r30, 0x3d	; 61
     558:	fe b7       	in	r31, 0x3e	; 62
     55a:	31 96       	adiw	r30, 0x01	; 1
     55c:	c7 e1       	ldi	r28, 0x17	; 23
     55e:	d1 e0       	ldi	r29, 0x01	; 1
     560:	ad b7       	in	r26, 0x3d	; 61
     562:	be b7       	in	r27, 0x3e	; 62
     564:	12 96       	adiw	r26, 0x02	; 2
     566:	dc 93       	st	X, r29
     568:	ce 93       	st	-X, r28
     56a:	11 97       	sbiw	r26, 0x01	; 1
     56c:	20 e6       	ldi	r18, 0x60	; 96
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	33 83       	std	Z+3, r19	; 0x03
     572:	22 83       	std	Z+2, r18	; 0x02
     574:	95 83       	std	Z+5, r25	; 0x05
     576:	84 83       	std	Z+4, r24	; 0x04
     578:	0e 94 02 06 	call	0xc04	; 0xc04 <sprintf>
		strcat(buf_lcd2,buf_lcd1);
     57c:	8d b7       	in	r24, 0x3d	; 61
     57e:	9e b7       	in	r25, 0x3e	; 62
     580:	06 96       	adiw	r24, 0x06	; 6
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	9e bf       	out	0x3e, r25	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	8d bf       	out	0x3d, r24	; 61
     58c:	07 e2       	ldi	r16, 0x27	; 39
     58e:	11 e0       	ldi	r17, 0x01	; 1
     590:	c8 01       	movw	r24, r16
     592:	be 01       	movw	r22, r28
     594:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <strcat>
		LCD4_gotoxy(2,1);
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
		LCD4_write_string(buf_lcd2);
     5a4:	c8 01       	movw	r24, r16
     5a6:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
     5aa:	fd c0       	rjmp	.+506    	; 0x7a6 <__vector_1+0x4b8>
	}
	else if(temp==9)
     5ac:	89 30       	cpi	r24, 0x09	; 9
     5ae:	a1 f5       	brne	.+104    	; 0x618 <__vector_1+0x32a>
	{
		key = 6;
     5b0:	86 e0       	ldi	r24, 0x06	; 6
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	90 93 06 01 	sts	0x0106, r25
     5b8:	80 93 05 01 	sts	0x0105, r24
		sprintf(buf_lcd1, "%1d",key);
     5bc:	00 d0       	rcall	.+0      	; 0x5be <__vector_1+0x2d0>
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <__vector_1+0x2d2>
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <__vector_1+0x2d4>
     5c2:	ed b7       	in	r30, 0x3d	; 61
     5c4:	fe b7       	in	r31, 0x3e	; 62
     5c6:	31 96       	adiw	r30, 0x01	; 1
     5c8:	c7 e1       	ldi	r28, 0x17	; 23
     5ca:	d1 e0       	ldi	r29, 0x01	; 1
     5cc:	ad b7       	in	r26, 0x3d	; 61
     5ce:	be b7       	in	r27, 0x3e	; 62
     5d0:	12 96       	adiw	r26, 0x02	; 2
     5d2:	dc 93       	st	X, r29
     5d4:	ce 93       	st	-X, r28
     5d6:	11 97       	sbiw	r26, 0x01	; 1
     5d8:	20 e6       	ldi	r18, 0x60	; 96
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	33 83       	std	Z+3, r19	; 0x03
     5de:	22 83       	std	Z+2, r18	; 0x02
     5e0:	95 83       	std	Z+5, r25	; 0x05
     5e2:	84 83       	std	Z+4, r24	; 0x04
     5e4:	0e 94 02 06 	call	0xc04	; 0xc04 <sprintf>
		strcat(buf_lcd2,buf_lcd1);
     5e8:	8d b7       	in	r24, 0x3d	; 61
     5ea:	9e b7       	in	r25, 0x3e	; 62
     5ec:	06 96       	adiw	r24, 0x06	; 6
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	9e bf       	out	0x3e, r25	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	8d bf       	out	0x3d, r24	; 61
     5f8:	07 e2       	ldi	r16, 0x27	; 39
     5fa:	11 e0       	ldi	r17, 0x01	; 1
     5fc:	c8 01       	movw	r24, r16
     5fe:	be 01       	movw	r22, r28
     600:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <strcat>
		LCD4_gotoxy(2,1);
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
		LCD4_write_string(buf_lcd2);
     610:	c8 01       	movw	r24, r16
     612:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
     616:	c7 c0       	rjmp	.+398    	; 0x7a6 <__vector_1+0x4b8>
	}
	else if(temp==0)
     618:	88 23       	and	r24, r24
     61a:	a1 f5       	brne	.+104    	; 0x684 <__vector_1+0x396>
	{
		key = 7;
     61c:	87 e0       	ldi	r24, 0x07	; 7
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	90 93 06 01 	sts	0x0106, r25
     624:	80 93 05 01 	sts	0x0105, r24
		sprintf(buf_lcd1, "%1d",key);
     628:	00 d0       	rcall	.+0      	; 0x62a <__vector_1+0x33c>
     62a:	00 d0       	rcall	.+0      	; 0x62c <__vector_1+0x33e>
     62c:	00 d0       	rcall	.+0      	; 0x62e <__vector_1+0x340>
     62e:	ed b7       	in	r30, 0x3d	; 61
     630:	fe b7       	in	r31, 0x3e	; 62
     632:	31 96       	adiw	r30, 0x01	; 1
     634:	c7 e1       	ldi	r28, 0x17	; 23
     636:	d1 e0       	ldi	r29, 0x01	; 1
     638:	ad b7       	in	r26, 0x3d	; 61
     63a:	be b7       	in	r27, 0x3e	; 62
     63c:	12 96       	adiw	r26, 0x02	; 2
     63e:	dc 93       	st	X, r29
     640:	ce 93       	st	-X, r28
     642:	11 97       	sbiw	r26, 0x01	; 1
     644:	20 e6       	ldi	r18, 0x60	; 96
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	33 83       	std	Z+3, r19	; 0x03
     64a:	22 83       	std	Z+2, r18	; 0x02
     64c:	95 83       	std	Z+5, r25	; 0x05
     64e:	84 83       	std	Z+4, r24	; 0x04
     650:	0e 94 02 06 	call	0xc04	; 0xc04 <sprintf>
		strcat(buf_lcd2,buf_lcd1);
     654:	8d b7       	in	r24, 0x3d	; 61
     656:	9e b7       	in	r25, 0x3e	; 62
     658:	06 96       	adiw	r24, 0x06	; 6
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	9e bf       	out	0x3e, r25	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	8d bf       	out	0x3d, r24	; 61
     664:	07 e2       	ldi	r16, 0x27	; 39
     666:	11 e0       	ldi	r17, 0x01	; 1
     668:	c8 01       	movw	r24, r16
     66a:	be 01       	movw	r22, r28
     66c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <strcat>
		LCD4_gotoxy(2,1);
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
		LCD4_write_string(buf_lcd2);
     67c:	c8 01       	movw	r24, r16
     67e:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
     682:	91 c0       	rjmp	.+290    	; 0x7a6 <__vector_1+0x4b8>
	}
	else if(temp==4)
     684:	84 30       	cpi	r24, 0x04	; 4
     686:	a1 f5       	brne	.+104    	; 0x6f0 <__vector_1+0x402>
	{
		key = 8;
     688:	88 e0       	ldi	r24, 0x08	; 8
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	90 93 06 01 	sts	0x0106, r25
     690:	80 93 05 01 	sts	0x0105, r24
		sprintf(buf_lcd1, "%1d",key);
     694:	00 d0       	rcall	.+0      	; 0x696 <__vector_1+0x3a8>
     696:	00 d0       	rcall	.+0      	; 0x698 <__vector_1+0x3aa>
     698:	00 d0       	rcall	.+0      	; 0x69a <__vector_1+0x3ac>
     69a:	ed b7       	in	r30, 0x3d	; 61
     69c:	fe b7       	in	r31, 0x3e	; 62
     69e:	31 96       	adiw	r30, 0x01	; 1
     6a0:	c7 e1       	ldi	r28, 0x17	; 23
     6a2:	d1 e0       	ldi	r29, 0x01	; 1
     6a4:	ad b7       	in	r26, 0x3d	; 61
     6a6:	be b7       	in	r27, 0x3e	; 62
     6a8:	12 96       	adiw	r26, 0x02	; 2
     6aa:	dc 93       	st	X, r29
     6ac:	ce 93       	st	-X, r28
     6ae:	11 97       	sbiw	r26, 0x01	; 1
     6b0:	20 e6       	ldi	r18, 0x60	; 96
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	33 83       	std	Z+3, r19	; 0x03
     6b6:	22 83       	std	Z+2, r18	; 0x02
     6b8:	95 83       	std	Z+5, r25	; 0x05
     6ba:	84 83       	std	Z+4, r24	; 0x04
     6bc:	0e 94 02 06 	call	0xc04	; 0xc04 <sprintf>
		strcat(buf_lcd2,buf_lcd1);
     6c0:	8d b7       	in	r24, 0x3d	; 61
     6c2:	9e b7       	in	r25, 0x3e	; 62
     6c4:	06 96       	adiw	r24, 0x06	; 6
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	9e bf       	out	0x3e, r25	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	8d bf       	out	0x3d, r24	; 61
     6d0:	07 e2       	ldi	r16, 0x27	; 39
     6d2:	11 e0       	ldi	r17, 0x01	; 1
     6d4:	c8 01       	movw	r24, r16
     6d6:	be 01       	movw	r22, r28
     6d8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <strcat>
		LCD4_gotoxy(2,1);
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
		LCD4_write_string(buf_lcd2);
     6e8:	c8 01       	movw	r24, r16
     6ea:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
     6ee:	5b c0       	rjmp	.+182    	; 0x7a6 <__vector_1+0x4b8>
	}
	else if(temp==8)
     6f0:	88 30       	cpi	r24, 0x08	; 8
     6f2:	a1 f5       	brne	.+104    	; 0x75c <__vector_1+0x46e>
	{
		key = 9;
     6f4:	89 e0       	ldi	r24, 0x09	; 9
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	90 93 06 01 	sts	0x0106, r25
     6fc:	80 93 05 01 	sts	0x0105, r24
		sprintf(buf_lcd1, "%1d",key);
     700:	00 d0       	rcall	.+0      	; 0x702 <__vector_1+0x414>
     702:	00 d0       	rcall	.+0      	; 0x704 <__vector_1+0x416>
     704:	00 d0       	rcall	.+0      	; 0x706 <__vector_1+0x418>
     706:	ed b7       	in	r30, 0x3d	; 61
     708:	fe b7       	in	r31, 0x3e	; 62
     70a:	31 96       	adiw	r30, 0x01	; 1
     70c:	c7 e1       	ldi	r28, 0x17	; 23
     70e:	d1 e0       	ldi	r29, 0x01	; 1
     710:	ad b7       	in	r26, 0x3d	; 61
     712:	be b7       	in	r27, 0x3e	; 62
     714:	12 96       	adiw	r26, 0x02	; 2
     716:	dc 93       	st	X, r29
     718:	ce 93       	st	-X, r28
     71a:	11 97       	sbiw	r26, 0x01	; 1
     71c:	20 e6       	ldi	r18, 0x60	; 96
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	33 83       	std	Z+3, r19	; 0x03
     722:	22 83       	std	Z+2, r18	; 0x02
     724:	95 83       	std	Z+5, r25	; 0x05
     726:	84 83       	std	Z+4, r24	; 0x04
     728:	0e 94 02 06 	call	0xc04	; 0xc04 <sprintf>
		strcat(buf_lcd2,buf_lcd1);
     72c:	8d b7       	in	r24, 0x3d	; 61
     72e:	9e b7       	in	r25, 0x3e	; 62
     730:	06 96       	adiw	r24, 0x06	; 6
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	9e bf       	out	0x3e, r25	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	8d bf       	out	0x3d, r24	; 61
     73c:	07 e2       	ldi	r16, 0x27	; 39
     73e:	11 e0       	ldi	r17, 0x01	; 1
     740:	c8 01       	movw	r24, r16
     742:	be 01       	movw	r22, r28
     744:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <strcat>
		LCD4_gotoxy(2,1);
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
		LCD4_write_string(buf_lcd2);
     754:	c8 01       	movw	r24, r16
     756:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
     75a:	25 c0       	rjmp	.+74     	; 0x7a6 <__vector_1+0x4b8>
	}
	else if(temp==15)
     75c:	8f 30       	cpi	r24, 0x0F	; 15
     75e:	19 f1       	breq	.+70     	; 0x7a6 <__vector_1+0x4b8>
	{
	//plus
	}
		
	else if(temp==14)
     760:	8e 30       	cpi	r24, 0x0E	; 14
     762:	09 f1       	breq	.+66     	; 0x7a6 <__vector_1+0x4b8>
	{	
	//subtraction
	}		
		
	else if(temp==13)
     764:	8d 30       	cpi	r24, 0x0D	; 13
     766:	f9 f0       	breq	.+62     	; 0x7a6 <__vector_1+0x4b8>
	{
	//mult	
	}		

	else if(temp==12)
     768:	8c 30       	cpi	r24, 0x0C	; 12
     76a:	e9 f0       	breq	.+58     	; 0x7a6 <__vector_1+0x4b8>
	{		
	//div	
	}		
		
	else if(temp==11)
     76c:	8b 30       	cpi	r24, 0x0B	; 11
     76e:	39 f4       	brne	.+14     	; 0x77e <__vector_1+0x490>
	{	
	strcpy(buf_lcd3,buf_lcd2);	
     770:	87 e0       	ldi	r24, 0x07	; 7
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	67 e2       	ldi	r22, 0x27	; 39
     776:	71 e0       	ldi	r23, 0x01	; 1
     778:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <strcpy>
     77c:	14 c0       	rjmp	.+40     	; 0x7a6 <__vector_1+0x4b8>
	}		
	
	else if(temp==3)
     77e:	83 30       	cpi	r24, 0x03	; 3
     780:	91 f4       	brne	.+36     	; 0x7a6 <__vector_1+0x4b8>
	{
	LCD4_clear();
     782:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD4_clear>
	LCD4_gotoxy(1,1);
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
	LCD4_write_string("ENTER PASSWORD");
     792:	84 e6       	ldi	r24, 0x64	; 100
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
	buf_lcd1[0] = '\0';
     79a:	10 92 17 01 	sts	0x0117, r1
	buf_lcd2[0] = '\0';
     79e:	10 92 27 01 	sts	0x0127, r1
	buf_lcd3[0] = '\0';
     7a2:	10 92 07 01 	sts	0x0107, r1
	}		

}
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	bf 91       	pop	r27
     7b0:	af 91       	pop	r26
     7b2:	9f 91       	pop	r25
     7b4:	8f 91       	pop	r24
     7b6:	7f 91       	pop	r23
     7b8:	6f 91       	pop	r22
     7ba:	5f 91       	pop	r21
     7bc:	4f 91       	pop	r20
     7be:	3f 91       	pop	r19
     7c0:	2f 91       	pop	r18
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	0f 90       	pop	r0
     7cc:	1f 90       	pop	r1
     7ce:	18 95       	reti

000007d0 <__vector_2>:
ISR(INT1_vect)
{	unsigned char i =0;
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	2f 93       	push	r18
     7e2:	3f 93       	push	r19
     7e4:	4f 93       	push	r20
     7e6:	5f 93       	push	r21
     7e8:	6f 93       	push	r22
     7ea:	7f 93       	push	r23
     7ec:	8f 93       	push	r24
     7ee:	9f 93       	push	r25
     7f0:	af 93       	push	r26
     7f2:	bf 93       	push	r27
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	ef 93       	push	r30
     7fa:	ff 93       	push	r31
	vib++;
     7fc:	80 91 04 01 	lds	r24, 0x0104
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	80 93 04 01 	sts	0x0104, r24
	if(vib == 3){
     806:	83 30       	cpi	r24, 0x03	; 3
     808:	c1 f5       	brne	.+112    	; 0x87a <__stack+0x1b>
	UART_TxString("====!!!SUSPECTED BREAK-IN!!!====\r");
     80a:	83 e7       	ldi	r24, 0x73	; 115
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 56 05 	call	0xaac	; 0xaac <UART_TxString>
	UART_TxString("PRESS 1 TO CALL THE SECURITY\r");
     812:	85 e9       	ldi	r24, 0x95	; 149
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 56 05 	call	0xaac	; 0xaac <UART_TxString>
	char a = UART_RxChar();
     81a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <UART_RxChar>
		if (a == '1')
     81e:	81 33       	cpi	r24, 0x31	; 49
     820:	61 f5       	brne	.+88     	; 0x87a <__stack+0x1b>
		{
		UART_TxString("CALLING THE SECURITY\r");
     822:	83 eb       	ldi	r24, 0xB3	; 179
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 56 05 	call	0xaac	; 0xaac <UART_TxString>
     82a:	1a e0       	ldi	r17, 0x0A	; 10
			while(i<10)
			{
			LCD4_clear();
			LCD4_gotoxy(1,1);
			LCD4_write_string("Calling Security");
     82c:	c9 ec       	ldi	r28, 0xC9	; 201
     82e:	d0 e0       	ldi	r29, 0x00	; 0
			PORTA ^= (1<<PA2);
     830:	04 e0       	ldi	r16, 0x04	; 4
			_delay_ms(100);
			PORTA ^= (1<<PA3);
     832:	ff 24       	eor	r15, r15
     834:	68 94       	set
     836:	f3 f8       	bld	r15, 3
		if (a == '1')
		{
		UART_TxString("CALLING THE SECURITY\r");
			while(i<10)
			{
			LCD4_clear();
     838:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD4_clear>
			LCD4_gotoxy(1,1);
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
			LCD4_write_string("Calling Security");
     848:	ce 01       	movw	r24, r28
     84a:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
			PORTA ^= (1<<PA2);
     84e:	8b b3       	in	r24, 0x1b	; 27
     850:	80 27       	eor	r24, r16
     852:	8b bb       	out	0x1b, r24	; 27
     854:	87 ea       	ldi	r24, 0xA7	; 167
     856:	91 e6       	ldi	r25, 0x61	; 97
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <__vector_2+0x88>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <__vector_2+0x8e>
     85e:	00 00       	nop
			_delay_ms(100);
			PORTA ^= (1<<PA3);
     860:	8b b3       	in	r24, 0x1b	; 27
     862:	8f 25       	eor	r24, r15
     864:	8b bb       	out	0x1b, r24	; 27
     866:	87 ea       	ldi	r24, 0xA7	; 167
     868:	91 e6       	ldi	r25, 0x61	; 97
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <__stack+0xb>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <__stack+0x11>
     870:	00 00       	nop
			_delay_ms(100);
			i++;
			vib=0;
     872:	10 92 04 01 	sts	0x0104, r1
     876:	11 50       	subi	r17, 0x01	; 1
	UART_TxString("PRESS 1 TO CALL THE SECURITY\r");
	char a = UART_RxChar();
		if (a == '1')
		{
		UART_TxString("CALLING THE SECURITY\r");
			while(i<10)
     878:	f9 f6       	brne	.-66     	; 0x838 <__vector_2+0x68>
			i++;
			vib=0;
			}
		}
	}	
}
     87a:	ff 91       	pop	r31
     87c:	ef 91       	pop	r30
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	0f 90       	pop	r0
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	0f 90       	pop	r0
     8a2:	1f 90       	pop	r1
     8a4:	18 95       	reti

000008a6 <main>:
int main(void)
{	
     8a6:	4f 92       	push	r4
     8a8:	5f 92       	push	r5
     8aa:	6f 92       	push	r6
     8ac:	7f 92       	push	r7
     8ae:	8f 92       	push	r8
     8b0:	9f 92       	push	r9
     8b2:	af 92       	push	r10
     8b4:	bf 92       	push	r11
     8b6:	cf 92       	push	r12
     8b8:	df 92       	push	r13
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
	UART_Init(9600);
     8c6:	60 e8       	ldi	r22, 0x80	; 128
     8c8:	75 e2       	ldi	r23, 0x25	; 37
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 46 05 	call	0xa8c	; 0xa8c <UART_Init>
	DDRC=0x0F;
     8d2:	8f e0       	ldi	r24, 0x0F	; 15
     8d4:	84 bb       	out	0x14, r24	; 20
	DDRA=0xFF;
     8d6:	9f ef       	ldi	r25, 0xFF	; 255
     8d8:	9a bb       	out	0x1a, r25	; 26
	PORTC=0xF0;
     8da:	20 ef       	ldi	r18, 0xF0	; 240
     8dc:	25 bb       	out	0x15, r18	; 21
	DDRD |= (1<<PD5)|(1<<PD6)|(1<<PD7);
     8de:	21 b3       	in	r18, 0x11	; 17
     8e0:	20 6e       	ori	r18, 0xE0	; 224
     8e2:	21 bb       	out	0x11, r18	; 17
	DDRD &= ~(1<<PD2)&~(1<<PD3);
     8e4:	21 b3       	in	r18, 0x11	; 17
     8e6:	23 7f       	andi	r18, 0xF3	; 243
     8e8:	21 bb       	out	0x11, r18	; 17
	PORTD = 0xFF;
     8ea:	92 bb       	out	0x12, r25	; 18
	GICR|=0xC0;
     8ec:	9b b7       	in	r25, 0x3b	; 59
     8ee:	90 6c       	ori	r25, 0xC0	; 192
     8f0:	9b bf       	out	0x3b, r25	; 59
    MCUCR=0x0F;
     8f2:	85 bf       	out	0x35, r24	; 53
    //MCUCSR=0x00;
    GIFR=0xC0;
     8f4:	80 ec       	ldi	r24, 0xC0	; 192
     8f6:	8a bf       	out	0x3a, r24	; 58
	sei();
     8f8:	78 94       	sei
	MENU:
	LCD4_init();
	LCD4_clear();
	LCD4_gotoxy(1,1);
	LCD4_write_string("ENTER PASSWORD");
     8fa:	0f 2e       	mov	r0, r31
     8fc:	f4 e6       	ldi	r31, 0x64	; 100
     8fe:	cf 2e       	mov	r12, r31
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	df 2e       	mov	r13, r31
     904:	f0 2d       	mov	r31, r0
	while(1)
	{	
		PORTA |=(1<<PA4);
		int x = atoi(buf_lcd3);
     906:	c7 e0       	ldi	r28, 0x07	; 7
     908:	d1 e0       	ldi	r29, 0x01	; 1
		if (x==123)
		{	
				LCD4_clear();
				LCD4_gotoxy(1,1);
				LCD4_write_string("WELCOME HOME!!!");
				PORTA = 0x02;
     90a:	44 24       	eor	r4, r4
     90c:	68 94       	set
     90e:	41 f8       	bld	r4, 1
				_delay_ms(2000);
				PORTA = 0x00;
				buf_lcd3[0] = '\0';
				buf_lcd2[0] = '\0';
     910:	0f 2e       	mov	r0, r31
     912:	f7 e2       	ldi	r31, 0x27	; 39
     914:	ef 2e       	mov	r14, r31
     916:	f1 e0       	ldi	r31, 0x01	; 1
     918:	ff 2e       	mov	r15, r31
     91a:	f0 2d       	mov	r31, r0
	LCD4_gotoxy(1,1);
	LCD4_write_string("ENTER PASSWORD");
	while(1)
	{	
		PORTA |=(1<<PA4);
		int x = atoi(buf_lcd3);
     91c:	ce 01       	movw	r24, r28
     91e:	0c 2f       	mov	r16, r28
     920:	19 2f       	mov	r17, r25
		if (x==123)
		{	
				LCD4_clear();
				LCD4_gotoxy(1,1);
				LCD4_write_string("WELCOME HOME!!!");
     922:	0f 2e       	mov	r0, r31
     924:	fa ed       	ldi	r31, 0xDA	; 218
     926:	8f 2e       	mov	r8, r31
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	9f 2e       	mov	r9, r31
     92c:	f0 2d       	mov	r31, r0
				PORTA = 0x00;
				buf_lcd3[0] = '\0';
				buf_lcd2[0] = '\0';
				LCD4_clear();
				LCD4_gotoxy(1,1);
				LCD4_write_string("LOCK? PRESS 1");
     92e:	0f 2e       	mov	r0, r31
     930:	fa ee       	ldi	r31, 0xEA	; 234
     932:	6f 2e       	mov	r6, r31
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	7f 2e       	mov	r7, r31
     938:	f0 2d       	mov	r31, r0
		}
		x = atoi(buf_lcd3);
				if (x==1)
				{
				PORTA = 0x01;
     93a:	55 24       	eor	r5, r5
     93c:	53 94       	inc	r5
				PORTA = 0x00;
				buf_lcd3[0] = '\0';
				buf_lcd2[0] = '\0';
				LCD4_clear();
				LCD4_gotoxy(1,1);
				LCD4_write_string("DOOR CLOSED");
     93e:	0f 2e       	mov	r0, r31
     940:	f8 ef       	ldi	r31, 0xF8	; 248
     942:	af 2e       	mov	r10, r31
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	bf 2e       	mov	r11, r31
     948:	f0 2d       	mov	r31, r0
    MCUCR=0x0F;
    //MCUCSR=0x00;
    GIFR=0xC0;
	sei();
	MENU:
	LCD4_init();
     94a:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD4_init>
	LCD4_clear();
     94e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD4_clear>
	LCD4_gotoxy(1,1);
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
	LCD4_write_string("ENTER PASSWORD");
     95e:	c6 01       	movw	r24, r12
     960:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
	while(1)
	{	
		PORTA |=(1<<PA4);
     964:	dc 9a       	sbi	0x1b, 4	; 27
		int x = atoi(buf_lcd3);
     966:	80 2f       	mov	r24, r16
     968:	91 2f       	mov	r25, r17
     96a:	0e 94 ca 05 	call	0xb94	; 0xb94 <atoi>
		if (x==123)
     96e:	8b 37       	cpi	r24, 0x7B	; 123
     970:	91 05       	cpc	r25, r1
     972:	21 f5       	brne	.+72     	; 0x9bc <main+0x116>
		{	
				LCD4_clear();
     974:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD4_clear>
				LCD4_gotoxy(1,1);
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
				LCD4_write_string("WELCOME HOME!!!");
     984:	c4 01       	movw	r24, r8
     986:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
				PORTA = 0x02;
     98a:	4b ba       	out	0x1b, r4	; 27
     98c:	8f e7       	ldi	r24, 0x7F	; 127
     98e:	9a e1       	ldi	r25, 0x1A	; 26
     990:	a6 e0       	ldi	r26, 0x06	; 6
     992:	81 50       	subi	r24, 0x01	; 1
     994:	90 40       	sbci	r25, 0x00	; 0
     996:	a0 40       	sbci	r26, 0x00	; 0
     998:	e1 f7       	brne	.-8      	; 0x992 <main+0xec>
     99a:	00 c0       	rjmp	.+0      	; 0x99c <main+0xf6>
     99c:	00 00       	nop
				_delay_ms(2000);
				PORTA = 0x00;
     99e:	1b ba       	out	0x1b, r1	; 27
				buf_lcd3[0] = '\0';
     9a0:	18 82       	st	Y, r1
				buf_lcd2[0] = '\0';
     9a2:	d7 01       	movw	r26, r14
     9a4:	1c 92       	st	X, r1
				LCD4_clear();
     9a6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD4_clear>
				LCD4_gotoxy(1,1);
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
				LCD4_write_string("LOCK? PRESS 1");
     9b6:	c3 01       	movw	r24, r6
     9b8:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
		}
		x = atoi(buf_lcd3);
     9bc:	80 2f       	mov	r24, r16
     9be:	91 2f       	mov	r25, r17
     9c0:	0e 94 ca 05 	call	0xb94	; 0xb94 <atoi>
				if (x==1)
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	91 05       	cpc	r25, r1
     9c8:	69 f6       	brne	.-102    	; 0x964 <main+0xbe>
				{
				PORTA = 0x01;
     9ca:	5b ba       	out	0x1b, r5	; 27
     9cc:	8f e7       	ldi	r24, 0x7F	; 127
     9ce:	9a e1       	ldi	r25, 0x1A	; 26
     9d0:	a6 e0       	ldi	r26, 0x06	; 6
     9d2:	81 50       	subi	r24, 0x01	; 1
     9d4:	90 40       	sbci	r25, 0x00	; 0
     9d6:	a0 40       	sbci	r26, 0x00	; 0
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <main+0x12c>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <main+0x136>
     9dc:	00 00       	nop
				_delay_ms(2000);
				PORTA = 0x00;
     9de:	1b ba       	out	0x1b, r1	; 27
				buf_lcd3[0] = '\0';
     9e0:	18 82       	st	Y, r1
				buf_lcd2[0] = '\0';
     9e2:	d7 01       	movw	r26, r14
     9e4:	1c 92       	st	X, r1
				LCD4_clear();
     9e6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD4_clear>
				LCD4_gotoxy(1,1);
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD4_gotoxy>
				LCD4_write_string("DOOR CLOSED");
     9f6:	c5 01       	movw	r24, r10
     9f8:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_write_string>
     9fc:	8f e3       	ldi	r24, 0x3F	; 63
     9fe:	9d e0       	ldi	r25, 0x0D	; 13
     a00:	a3 e0       	ldi	r26, 0x03	; 3
     a02:	81 50       	subi	r24, 0x01	; 1
     a04:	90 40       	sbci	r25, 0x00	; 0
     a06:	a0 40       	sbci	r26, 0x00	; 0
     a08:	e1 f7       	brne	.-8      	; 0xa02 <main+0x15c>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <main+0x166>
     a0c:	00 00       	nop
     a0e:	9d cf       	rjmp	.-198    	; 0x94a <main+0xa4>

00000a10 <UART_SetBaudRate>:
	UART_SetBaudRate(v_baudRate_u32);
}


void UART_SetBaudRate(uint32_t v_baudRate_u32)
{
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	7b 01       	movw	r14, r22
     a1a:	8c 01       	movw	r16, r24
	uint16_t RegValue;

	if((v_baudRate_u32 >= C_MinBaudRate_U32) && (v_baudRate_u32<=C_MaxBaudRate_U32))
     a1c:	dc 01       	movw	r26, r24
     a1e:	cb 01       	movw	r24, r22
     a20:	80 56       	subi	r24, 0x60	; 96
     a22:	99 40       	sbci	r25, 0x09	; 9
     a24:	a0 40       	sbci	r26, 0x00	; 0
     a26:	b0 40       	sbci	r27, 0x00	; 0
     a28:	81 3a       	cpi	r24, 0xA1	; 161
     a2a:	28 eb       	ldi	r18, 0xB8	; 184
     a2c:	92 07       	cpc	r25, r18
     a2e:	21 e0       	ldi	r18, 0x01	; 1
     a30:	a2 07       	cpc	r26, r18
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	b2 07       	cpc	r27, r18
     a36:	08 f5       	brcc	.+66     	; 0xa7a <UART_SetBaudRate+0x6a>
	{
		/* Check if the requested baudrate is within range,
	     If yes then calculate the value to be loaded into baud rate generator. */
		RegValue = M_GetBaudRateGeneratorValue(v_baudRate_u32);
     a38:	c8 01       	movw	r24, r16
     a3a:	b7 01       	movw	r22, r14
     a3c:	28 ef       	ldi	r18, 0xF8	; 248
     a3e:	3f ef       	ldi	r19, 0xFF	; 255
     a40:	4f ef       	ldi	r20, 0xFF	; 255
     a42:	5f ef       	ldi	r21, 0xFF	; 255
     a44:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsi3>
     a48:	60 58       	subi	r22, 0x80	; 128
     a4a:	7b 47       	sbci	r23, 0x7B	; 123
     a4c:	81 4e       	sbci	r24, 0xE1	; 225
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	ee 0c       	add	r14, r14
     a52:	ff 1c       	adc	r15, r15
     a54:	00 1f       	adc	r16, r16
     a56:	11 1f       	adc	r17, r17
     a58:	ee 0c       	add	r14, r14
     a5a:	ff 1c       	adc	r15, r15
     a5c:	00 1f       	adc	r16, r16
     a5e:	11 1f       	adc	r17, r17
     a60:	a8 01       	movw	r20, r16
     a62:	97 01       	movw	r18, r14
     a64:	22 0f       	add	r18, r18
     a66:	33 1f       	adc	r19, r19
     a68:	44 1f       	adc	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	22 0f       	add	r18, r18
     a6e:	33 1f       	adc	r19, r19
     a70:	44 1f       	adc	r20, r20
     a72:	55 1f       	adc	r21, r21
     a74:	0e 94 a8 05 	call	0xb50	; 0xb50 <__udivmodsi4>
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <UART_SetBaudRate+0x6e>
	}
	else
	{
		/*	 Invalid baudrate requested, hence set it to default baudrate of 9600 */
		RegValue = M_GetBaudRateGeneratorValue(9600);
     a7a:	2c e0       	ldi	r18, 0x0C	; 12
     a7c:	30 e0       	ldi	r19, 0x00	; 0
	}

	UBRRL = util_ExtractByte0to8(RegValue);
     a7e:	29 b9       	out	0x09, r18	; 9
	UBRRH = util_ExtractByte8to16(RegValue);
     a80:	30 bd       	out	0x20, r19	; 32
}
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	08 95       	ret

00000a8c <UART_Init>:
 */ 
#include "uart.h"

void UART_Init(uint32_t v_baudRate_u32)
{
	UCSRB= (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);                  // Enable Receiver and Transmitter and Interrupt Receiver
     a8c:	28 e9       	ldi	r18, 0x98	; 152
     a8e:	2a b9       	out	0x0a, r18	; 10
	UCSRC= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);   // Asynchronous mode 8-bit data and 1-stop bit
     a90:	26 e8       	ldi	r18, 0x86	; 134
     a92:	20 bd       	out	0x20, r18	; 32
	UCSRA= 0x00;                                   // Clear the UASRT status register
     a94:	1b b8       	out	0x0b, r1	; 11
	UART_SetBaudRate(v_baudRate_u32);
     a96:	0e 94 08 05 	call	0xa10	; 0xa10 <UART_SetBaudRate>
}
     a9a:	08 95       	ret

00000a9c <UART_RxChar>:
}


char UART_RxChar(void)
{
	while(util_IsBitCleared(UCSRA,RXC));  // Wait till the data is received
     a9c:	5f 9b       	sbis	0x0b, 7	; 11
     a9e:	fe cf       	rjmp	.-4      	; 0xa9c <UART_RxChar>
	return(UDR);                          // return the received char
     aa0:	8c b1       	in	r24, 0x0c	; 12
}
     aa2:	08 95       	ret

00000aa4 <UART_TxChar>:

void UART_TxChar(char v_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
     aa4:	5d 9b       	sbis	0x0b, 5	; 11
     aa6:	fe cf       	rjmp	.-4      	; 0xaa4 <UART_TxChar>
	UDR =v_uartData_u8;                              // Load the data to be transmitted
     aa8:	8c b9       	out	0x0c, r24	; 12
}
     aaa:	08 95       	ret

00000aac <UART_TxString>:

void UART_TxString(char *ptr_string)
{
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	ec 01       	movw	r28, r24
	while(*ptr_string)
     ab2:	88 81       	ld	r24, Y
     ab4:	88 23       	and	r24, r24
     ab6:	31 f0       	breq	.+12     	; 0xac4 <UART_TxString+0x18>
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
	UDR =v_uartData_u8;                              // Load the data to be transmitted
}

void UART_TxString(char *ptr_string)
     ab8:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr_string)
	UART_TxChar(*ptr_string++);// Loop through the string and transmit char by char
     aba:	0e 94 52 05 	call	0xaa4	; 0xaa4 <UART_TxChar>
	UDR =v_uartData_u8;                              // Load the data to be transmitted
}

void UART_TxString(char *ptr_string)
{
	while(*ptr_string)
     abe:	89 91       	ld	r24, Y+
     ac0:	88 23       	and	r24, r24
     ac2:	d9 f7       	brne	.-10     	; 0xaba <UART_TxString+0xe>
	UART_TxChar(*ptr_string++);// Loop through the string and transmit char by char
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <UART_RxString>:

uint8_t UART_RxString(char *ptr_string)
{
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	ec 01       	movw	r28, r24
	char ch;
	uint8_t len = 0;
     ad4:	00 e0       	ldi	r16, 0x00	; 0
	while(1)
	{
		ch=UART_RxChar();    //Receive a char
     ad6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <UART_RxChar>
     ada:	18 2f       	mov	r17, r24
		UART_TxChar(ch);     //Echo back the received char
     adc:	0e 94 52 05 	call	0xaa4	; 0xaa4 <UART_TxChar>

		if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
     ae0:	1d 30       	cpi	r17, 0x0D	; 13
     ae2:	11 f0       	breq	.+4      	; 0xae8 <UART_RxString+0x1e>
     ae4:	1a 30       	cpi	r17, 0x0A	; 10
     ae6:	49 f4       	brne	.+18     	; 0xafa <UART_RxString+0x30>
		{						     //once enter key is pressed null terminate the string
			ptr_string[len]=0;           //and break the loop
     ae8:	c0 0f       	add	r28, r16
     aea:	d1 1d       	adc	r29, r1
     aec:	18 82       	st	Y, r1
			ptr_string[len]=ch; //copy the char into string and increment the index
			len++;
		}
	}
	return len;
}
     aee:	80 2f       	mov	r24, r16
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	08 95       	ret
		if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
		{						     //once enter key is pressed null terminate the string
			ptr_string[len]=0;           //and break the loop
			break;
		}
		else if((ch=='\b') && (len!=0))
     afa:	18 30       	cpi	r17, 0x08	; 8
     afc:	21 f4       	brne	.+8      	; 0xb06 <UART_RxString+0x3c>
     afe:	00 23       	and	r16, r16
     b00:	11 f0       	breq	.+4      	; 0xb06 <UART_RxString+0x3c>
		{
			len--;    //If backspace is pressed then decrement the index to remove the old char
     b02:	01 50       	subi	r16, 0x01	; 1
     b04:	e8 cf       	rjmp	.-48     	; 0xad6 <UART_RxString+0xc>
		}
		else
		{
			ptr_string[len]=ch; //copy the char into string and increment the index
     b06:	fe 01       	movw	r30, r28
     b08:	e0 0f       	add	r30, r16
     b0a:	f1 1d       	adc	r31, r1
     b0c:	10 83       	st	Z, r17
			len++;
     b0e:	0f 5f       	subi	r16, 0xFF	; 255
     b10:	e2 cf       	rjmp	.-60     	; 0xad6 <UART_RxString+0xc>

00000b12 <__mulsi3>:
     b12:	62 9f       	mul	r22, r18
     b14:	d0 01       	movw	r26, r0
     b16:	73 9f       	mul	r23, r19
     b18:	f0 01       	movw	r30, r0
     b1a:	82 9f       	mul	r24, r18
     b1c:	e0 0d       	add	r30, r0
     b1e:	f1 1d       	adc	r31, r1
     b20:	64 9f       	mul	r22, r20
     b22:	e0 0d       	add	r30, r0
     b24:	f1 1d       	adc	r31, r1
     b26:	92 9f       	mul	r25, r18
     b28:	f0 0d       	add	r31, r0
     b2a:	83 9f       	mul	r24, r19
     b2c:	f0 0d       	add	r31, r0
     b2e:	74 9f       	mul	r23, r20
     b30:	f0 0d       	add	r31, r0
     b32:	65 9f       	mul	r22, r21
     b34:	f0 0d       	add	r31, r0
     b36:	99 27       	eor	r25, r25
     b38:	72 9f       	mul	r23, r18
     b3a:	b0 0d       	add	r27, r0
     b3c:	e1 1d       	adc	r30, r1
     b3e:	f9 1f       	adc	r31, r25
     b40:	63 9f       	mul	r22, r19
     b42:	b0 0d       	add	r27, r0
     b44:	e1 1d       	adc	r30, r1
     b46:	f9 1f       	adc	r31, r25
     b48:	bd 01       	movw	r22, r26
     b4a:	cf 01       	movw	r24, r30
     b4c:	11 24       	eor	r1, r1
     b4e:	08 95       	ret

00000b50 <__udivmodsi4>:
     b50:	a1 e2       	ldi	r26, 0x21	; 33
     b52:	1a 2e       	mov	r1, r26
     b54:	aa 1b       	sub	r26, r26
     b56:	bb 1b       	sub	r27, r27
     b58:	fd 01       	movw	r30, r26
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__udivmodsi4_ep>

00000b5c <__udivmodsi4_loop>:
     b5c:	aa 1f       	adc	r26, r26
     b5e:	bb 1f       	adc	r27, r27
     b60:	ee 1f       	adc	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	a2 17       	cp	r26, r18
     b66:	b3 07       	cpc	r27, r19
     b68:	e4 07       	cpc	r30, r20
     b6a:	f5 07       	cpc	r31, r21
     b6c:	20 f0       	brcs	.+8      	; 0xb76 <__udivmodsi4_ep>
     b6e:	a2 1b       	sub	r26, r18
     b70:	b3 0b       	sbc	r27, r19
     b72:	e4 0b       	sbc	r30, r20
     b74:	f5 0b       	sbc	r31, r21

00000b76 <__udivmodsi4_ep>:
     b76:	66 1f       	adc	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	88 1f       	adc	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	1a 94       	dec	r1
     b80:	69 f7       	brne	.-38     	; 0xb5c <__udivmodsi4_loop>
     b82:	60 95       	com	r22
     b84:	70 95       	com	r23
     b86:	80 95       	com	r24
     b88:	90 95       	com	r25
     b8a:	9b 01       	movw	r18, r22
     b8c:	ac 01       	movw	r20, r24
     b8e:	bd 01       	movw	r22, r26
     b90:	cf 01       	movw	r24, r30
     b92:	08 95       	ret

00000b94 <atoi>:
     b94:	fc 01       	movw	r30, r24
     b96:	88 27       	eor	r24, r24
     b98:	99 27       	eor	r25, r25
     b9a:	e8 94       	clt
     b9c:	21 91       	ld	r18, Z+
     b9e:	20 32       	cpi	r18, 0x20	; 32
     ba0:	e9 f3       	breq	.-6      	; 0xb9c <atoi+0x8>
     ba2:	29 30       	cpi	r18, 0x09	; 9
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <atoi+0x16>
     ba6:	2e 30       	cpi	r18, 0x0E	; 14
     ba8:	c8 f3       	brcs	.-14     	; 0xb9c <atoi+0x8>
     baa:	2b 32       	cpi	r18, 0x2B	; 43
     bac:	41 f0       	breq	.+16     	; 0xbbe <atoi+0x2a>
     bae:	2d 32       	cpi	r18, 0x2D	; 45
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <atoi+0x2c>
     bb2:	68 94       	set
     bb4:	04 c0       	rjmp	.+8      	; 0xbbe <atoi+0x2a>
     bb6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__mulhi_const_10>
     bba:	82 0f       	add	r24, r18
     bbc:	91 1d       	adc	r25, r1
     bbe:	21 91       	ld	r18, Z+
     bc0:	20 53       	subi	r18, 0x30	; 48
     bc2:	2a 30       	cpi	r18, 0x0A	; 10
     bc4:	c0 f3       	brcs	.-16     	; 0xbb6 <atoi+0x22>
     bc6:	1e f4       	brtc	.+6      	; 0xbce <atoi+0x3a>
     bc8:	90 95       	com	r25
     bca:	81 95       	neg	r24
     bcc:	9f 4f       	sbci	r25, 0xFF	; 255
     bce:	08 95       	ret

00000bd0 <strcat>:
     bd0:	fb 01       	movw	r30, r22
     bd2:	dc 01       	movw	r26, r24
     bd4:	0d 90       	ld	r0, X+
     bd6:	00 20       	and	r0, r0
     bd8:	e9 f7       	brne	.-6      	; 0xbd4 <strcat+0x4>
     bda:	11 97       	sbiw	r26, 0x01	; 1
     bdc:	01 90       	ld	r0, Z+
     bde:	0d 92       	st	X+, r0
     be0:	00 20       	and	r0, r0
     be2:	e1 f7       	brne	.-8      	; 0xbdc <strcat+0xc>
     be4:	08 95       	ret

00000be6 <strcpy>:
     be6:	fb 01       	movw	r30, r22
     be8:	dc 01       	movw	r26, r24
     bea:	01 90       	ld	r0, Z+
     bec:	0d 92       	st	X+, r0
     bee:	00 20       	and	r0, r0
     bf0:	e1 f7       	brne	.-8      	; 0xbea <strcpy+0x4>
     bf2:	08 95       	ret

00000bf4 <__mulhi_const_10>:
     bf4:	7a e0       	ldi	r23, 0x0A	; 10
     bf6:	97 9f       	mul	r25, r23
     bf8:	90 2d       	mov	r25, r0
     bfa:	87 9f       	mul	r24, r23
     bfc:	80 2d       	mov	r24, r0
     bfe:	91 0d       	add	r25, r1
     c00:	11 24       	eor	r1, r1
     c02:	08 95       	ret

00000c04 <sprintf>:
     c04:	ae e0       	ldi	r26, 0x0E	; 14
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e8 e0       	ldi	r30, 0x08	; 8
     c0a:	f6 e0       	ldi	r31, 0x06	; 6
     c0c:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__prologue_saves__+0x1c>
     c10:	0d 89       	ldd	r16, Y+21	; 0x15
     c12:	1e 89       	ldd	r17, Y+22	; 0x16
     c14:	86 e0       	ldi	r24, 0x06	; 6
     c16:	8c 83       	std	Y+4, r24	; 0x04
     c18:	1a 83       	std	Y+2, r17	; 0x02
     c1a:	09 83       	std	Y+1, r16	; 0x01
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	9f e7       	ldi	r25, 0x7F	; 127
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	9e 01       	movw	r18, r28
     c26:	27 5e       	subi	r18, 0xE7	; 231
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	ce 01       	movw	r24, r28
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	6f 89       	ldd	r22, Y+23	; 0x17
     c30:	78 8d       	ldd	r23, Y+24	; 0x18
     c32:	a9 01       	movw	r20, r18
     c34:	0e 94 25 06 	call	0xc4a	; 0xc4a <vfprintf>
     c38:	ef 81       	ldd	r30, Y+7	; 0x07
     c3a:	f8 85       	ldd	r31, Y+8	; 0x08
     c3c:	e0 0f       	add	r30, r16
     c3e:	f1 1f       	adc	r31, r17
     c40:	10 82       	st	Z, r1
     c42:	2e 96       	adiw	r28, 0x0e	; 14
     c44:	e4 e0       	ldi	r30, 0x04	; 4
     c46:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__epilogue_restores__+0x1c>

00000c4a <vfprintf>:
     c4a:	ac e0       	ldi	r26, 0x0C	; 12
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	eb e2       	ldi	r30, 0x2B	; 43
     c50:	f6 e0       	ldi	r31, 0x06	; 6
     c52:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__prologue_saves__>
     c56:	6c 01       	movw	r12, r24
     c58:	1b 01       	movw	r2, r22
     c5a:	8a 01       	movw	r16, r20
     c5c:	fc 01       	movw	r30, r24
     c5e:	17 82       	std	Z+7, r1	; 0x07
     c60:	16 82       	std	Z+6, r1	; 0x06
     c62:	83 81       	ldd	r24, Z+3	; 0x03
     c64:	81 ff       	sbrs	r24, 1
     c66:	d1 c1       	rjmp	.+930    	; 0x100a <vfprintf+0x3c0>
     c68:	2e 01       	movw	r4, r28
     c6a:	08 94       	sec
     c6c:	41 1c       	adc	r4, r1
     c6e:	51 1c       	adc	r5, r1
     c70:	f6 01       	movw	r30, r12
     c72:	93 81       	ldd	r25, Z+3	; 0x03
     c74:	f1 01       	movw	r30, r2
     c76:	93 fd       	sbrc	r25, 3
     c78:	85 91       	lpm	r24, Z+
     c7a:	93 ff       	sbrs	r25, 3
     c7c:	81 91       	ld	r24, Z+
     c7e:	1f 01       	movw	r2, r30
     c80:	88 23       	and	r24, r24
     c82:	09 f4       	brne	.+2      	; 0xc86 <vfprintf+0x3c>
     c84:	be c1       	rjmp	.+892    	; 0x1002 <vfprintf+0x3b8>
     c86:	85 32       	cpi	r24, 0x25	; 37
     c88:	39 f4       	brne	.+14     	; 0xc98 <vfprintf+0x4e>
     c8a:	93 fd       	sbrc	r25, 3
     c8c:	85 91       	lpm	r24, Z+
     c8e:	93 ff       	sbrs	r25, 3
     c90:	81 91       	ld	r24, Z+
     c92:	1f 01       	movw	r2, r30
     c94:	85 32       	cpi	r24, 0x25	; 37
     c96:	29 f4       	brne	.+10     	; 0xca2 <vfprintf+0x58>
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	b6 01       	movw	r22, r12
     c9c:	0e 94 22 08 	call	0x1044	; 0x1044 <fputc>
     ca0:	e7 cf       	rjmp	.-50     	; 0xc70 <vfprintf+0x26>
     ca2:	ee 24       	eor	r14, r14
     ca4:	ff 24       	eor	r15, r15
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	20 32       	cpi	r18, 0x20	; 32
     caa:	b0 f4       	brcc	.+44     	; 0xcd8 <vfprintf+0x8e>
     cac:	8b 32       	cpi	r24, 0x2B	; 43
     cae:	69 f0       	breq	.+26     	; 0xcca <vfprintf+0x80>
     cb0:	8c 32       	cpi	r24, 0x2C	; 44
     cb2:	28 f4       	brcc	.+10     	; 0xcbe <vfprintf+0x74>
     cb4:	80 32       	cpi	r24, 0x20	; 32
     cb6:	51 f0       	breq	.+20     	; 0xccc <vfprintf+0x82>
     cb8:	83 32       	cpi	r24, 0x23	; 35
     cba:	71 f4       	brne	.+28     	; 0xcd8 <vfprintf+0x8e>
     cbc:	0b c0       	rjmp	.+22     	; 0xcd4 <vfprintf+0x8a>
     cbe:	8d 32       	cpi	r24, 0x2D	; 45
     cc0:	39 f0       	breq	.+14     	; 0xcd0 <vfprintf+0x86>
     cc2:	80 33       	cpi	r24, 0x30	; 48
     cc4:	49 f4       	brne	.+18     	; 0xcd8 <vfprintf+0x8e>
     cc6:	21 60       	ori	r18, 0x01	; 1
     cc8:	2c c0       	rjmp	.+88     	; 0xd22 <vfprintf+0xd8>
     cca:	22 60       	ori	r18, 0x02	; 2
     ccc:	24 60       	ori	r18, 0x04	; 4
     cce:	29 c0       	rjmp	.+82     	; 0xd22 <vfprintf+0xd8>
     cd0:	28 60       	ori	r18, 0x08	; 8
     cd2:	27 c0       	rjmp	.+78     	; 0xd22 <vfprintf+0xd8>
     cd4:	20 61       	ori	r18, 0x10	; 16
     cd6:	25 c0       	rjmp	.+74     	; 0xd22 <vfprintf+0xd8>
     cd8:	27 fd       	sbrc	r18, 7
     cda:	2c c0       	rjmp	.+88     	; 0xd34 <vfprintf+0xea>
     cdc:	38 2f       	mov	r19, r24
     cde:	30 53       	subi	r19, 0x30	; 48
     ce0:	3a 30       	cpi	r19, 0x0A	; 10
     ce2:	98 f4       	brcc	.+38     	; 0xd0a <vfprintf+0xc0>
     ce4:	26 ff       	sbrs	r18, 6
     ce6:	08 c0       	rjmp	.+16     	; 0xcf8 <vfprintf+0xae>
     ce8:	8e 2d       	mov	r24, r14
     cea:	88 0f       	add	r24, r24
     cec:	e8 2e       	mov	r14, r24
     cee:	ee 0c       	add	r14, r14
     cf0:	ee 0c       	add	r14, r14
     cf2:	e8 0e       	add	r14, r24
     cf4:	e3 0e       	add	r14, r19
     cf6:	15 c0       	rjmp	.+42     	; 0xd22 <vfprintf+0xd8>
     cf8:	8f 2d       	mov	r24, r15
     cfa:	88 0f       	add	r24, r24
     cfc:	f8 2e       	mov	r15, r24
     cfe:	ff 0c       	add	r15, r15
     d00:	ff 0c       	add	r15, r15
     d02:	f8 0e       	add	r15, r24
     d04:	f3 0e       	add	r15, r19
     d06:	20 62       	ori	r18, 0x20	; 32
     d08:	0c c0       	rjmp	.+24     	; 0xd22 <vfprintf+0xd8>
     d0a:	8e 32       	cpi	r24, 0x2E	; 46
     d0c:	21 f4       	brne	.+8      	; 0xd16 <vfprintf+0xcc>
     d0e:	26 fd       	sbrc	r18, 6
     d10:	78 c1       	rjmp	.+752    	; 0x1002 <vfprintf+0x3b8>
     d12:	20 64       	ori	r18, 0x40	; 64
     d14:	06 c0       	rjmp	.+12     	; 0xd22 <vfprintf+0xd8>
     d16:	8c 36       	cpi	r24, 0x6C	; 108
     d18:	11 f4       	brne	.+4      	; 0xd1e <vfprintf+0xd4>
     d1a:	20 68       	ori	r18, 0x80	; 128
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <vfprintf+0xd8>
     d1e:	88 36       	cpi	r24, 0x68	; 104
     d20:	49 f4       	brne	.+18     	; 0xd34 <vfprintf+0xea>
     d22:	f1 01       	movw	r30, r2
     d24:	93 fd       	sbrc	r25, 3
     d26:	85 91       	lpm	r24, Z+
     d28:	93 ff       	sbrs	r25, 3
     d2a:	81 91       	ld	r24, Z+
     d2c:	1f 01       	movw	r2, r30
     d2e:	88 23       	and	r24, r24
     d30:	09 f0       	breq	.+2      	; 0xd34 <vfprintf+0xea>
     d32:	ba cf       	rjmp	.-140    	; 0xca8 <vfprintf+0x5e>
     d34:	98 2f       	mov	r25, r24
     d36:	95 54       	subi	r25, 0x45	; 69
     d38:	93 30       	cpi	r25, 0x03	; 3
     d3a:	18 f0       	brcs	.+6      	; 0xd42 <vfprintf+0xf8>
     d3c:	90 52       	subi	r25, 0x20	; 32
     d3e:	93 30       	cpi	r25, 0x03	; 3
     d40:	28 f4       	brcc	.+10     	; 0xd4c <vfprintf+0x102>
     d42:	0c 5f       	subi	r16, 0xFC	; 252
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	ff e3       	ldi	r31, 0x3F	; 63
     d48:	f9 83       	std	Y+1, r31	; 0x01
     d4a:	0d c0       	rjmp	.+26     	; 0xd66 <vfprintf+0x11c>
     d4c:	83 36       	cpi	r24, 0x63	; 99
     d4e:	31 f0       	breq	.+12     	; 0xd5c <vfprintf+0x112>
     d50:	83 37       	cpi	r24, 0x73	; 115
     d52:	71 f0       	breq	.+28     	; 0xd70 <vfprintf+0x126>
     d54:	83 35       	cpi	r24, 0x53	; 83
     d56:	09 f0       	breq	.+2      	; 0xd5a <vfprintf+0x110>
     d58:	60 c0       	rjmp	.+192    	; 0xe1a <vfprintf+0x1d0>
     d5a:	22 c0       	rjmp	.+68     	; 0xda0 <vfprintf+0x156>
     d5c:	f8 01       	movw	r30, r16
     d5e:	80 81       	ld	r24, Z
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	0e 5f       	subi	r16, 0xFE	; 254
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	42 01       	movw	r8, r4
     d68:	71 e0       	ldi	r23, 0x01	; 1
     d6a:	a7 2e       	mov	r10, r23
     d6c:	b1 2c       	mov	r11, r1
     d6e:	16 c0       	rjmp	.+44     	; 0xd9c <vfprintf+0x152>
     d70:	62 e0       	ldi	r22, 0x02	; 2
     d72:	66 2e       	mov	r6, r22
     d74:	71 2c       	mov	r7, r1
     d76:	60 0e       	add	r6, r16
     d78:	71 1e       	adc	r7, r17
     d7a:	f8 01       	movw	r30, r16
     d7c:	80 80       	ld	r8, Z
     d7e:	91 80       	ldd	r9, Z+1	; 0x01
     d80:	26 ff       	sbrs	r18, 6
     d82:	03 c0       	rjmp	.+6      	; 0xd8a <vfprintf+0x140>
     d84:	6e 2d       	mov	r22, r14
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <vfprintf+0x144>
     d8a:	6f ef       	ldi	r22, 0xFF	; 255
     d8c:	7f ef       	ldi	r23, 0xFF	; 255
     d8e:	c4 01       	movw	r24, r8
     d90:	2c 87       	std	Y+12, r18	; 0x0c
     d92:	0e 94 17 08 	call	0x102e	; 0x102e <strnlen>
     d96:	5c 01       	movw	r10, r24
     d98:	83 01       	movw	r16, r6
     d9a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d9c:	2f 77       	andi	r18, 0x7F	; 127
     d9e:	17 c0       	rjmp	.+46     	; 0xdce <vfprintf+0x184>
     da0:	52 e0       	ldi	r21, 0x02	; 2
     da2:	65 2e       	mov	r6, r21
     da4:	71 2c       	mov	r7, r1
     da6:	60 0e       	add	r6, r16
     da8:	71 1e       	adc	r7, r17
     daa:	f8 01       	movw	r30, r16
     dac:	80 80       	ld	r8, Z
     dae:	91 80       	ldd	r9, Z+1	; 0x01
     db0:	26 ff       	sbrs	r18, 6
     db2:	03 c0       	rjmp	.+6      	; 0xdba <vfprintf+0x170>
     db4:	6e 2d       	mov	r22, r14
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <vfprintf+0x174>
     dba:	6f ef       	ldi	r22, 0xFF	; 255
     dbc:	7f ef       	ldi	r23, 0xFF	; 255
     dbe:	c4 01       	movw	r24, r8
     dc0:	2c 87       	std	Y+12, r18	; 0x0c
     dc2:	0e 94 0c 08 	call	0x1018	; 0x1018 <strnlen_P>
     dc6:	5c 01       	movw	r10, r24
     dc8:	2c 85       	ldd	r18, Y+12	; 0x0c
     dca:	20 68       	ori	r18, 0x80	; 128
     dcc:	83 01       	movw	r16, r6
     dce:	23 fd       	sbrc	r18, 3
     dd0:	20 c0       	rjmp	.+64     	; 0xe12 <vfprintf+0x1c8>
     dd2:	08 c0       	rjmp	.+16     	; 0xde4 <vfprintf+0x19a>
     dd4:	80 e2       	ldi	r24, 0x20	; 32
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	b6 01       	movw	r22, r12
     dda:	2c 87       	std	Y+12, r18	; 0x0c
     ddc:	0e 94 22 08 	call	0x1044	; 0x1044 <fputc>
     de0:	fa 94       	dec	r15
     de2:	2c 85       	ldd	r18, Y+12	; 0x0c
     de4:	8f 2d       	mov	r24, r15
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	a8 16       	cp	r10, r24
     dea:	b9 06       	cpc	r11, r25
     dec:	98 f3       	brcs	.-26     	; 0xdd4 <vfprintf+0x18a>
     dee:	11 c0       	rjmp	.+34     	; 0xe12 <vfprintf+0x1c8>
     df0:	f4 01       	movw	r30, r8
     df2:	27 fd       	sbrc	r18, 7
     df4:	85 91       	lpm	r24, Z+
     df6:	27 ff       	sbrs	r18, 7
     df8:	81 91       	ld	r24, Z+
     dfa:	4f 01       	movw	r8, r30
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	b6 01       	movw	r22, r12
     e00:	2c 87       	std	Y+12, r18	; 0x0c
     e02:	0e 94 22 08 	call	0x1044	; 0x1044 <fputc>
     e06:	2c 85       	ldd	r18, Y+12	; 0x0c
     e08:	f1 10       	cpse	r15, r1
     e0a:	fa 94       	dec	r15
     e0c:	08 94       	sec
     e0e:	a1 08       	sbc	r10, r1
     e10:	b1 08       	sbc	r11, r1
     e12:	a1 14       	cp	r10, r1
     e14:	b1 04       	cpc	r11, r1
     e16:	61 f7       	brne	.-40     	; 0xdf0 <vfprintf+0x1a6>
     e18:	f1 c0       	rjmp	.+482    	; 0xffc <vfprintf+0x3b2>
     e1a:	84 36       	cpi	r24, 0x64	; 100
     e1c:	11 f0       	breq	.+4      	; 0xe22 <vfprintf+0x1d8>
     e1e:	89 36       	cpi	r24, 0x69	; 105
     e20:	49 f5       	brne	.+82     	; 0xe74 <vfprintf+0x22a>
     e22:	27 ff       	sbrs	r18, 7
     e24:	08 c0       	rjmp	.+16     	; 0xe36 <vfprintf+0x1ec>
     e26:	f8 01       	movw	r30, r16
     e28:	60 81       	ld	r22, Z
     e2a:	71 81       	ldd	r23, Z+1	; 0x01
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	0c 5f       	subi	r16, 0xFC	; 252
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	09 c0       	rjmp	.+18     	; 0xe48 <vfprintf+0x1fe>
     e36:	f8 01       	movw	r30, r16
     e38:	60 81       	ld	r22, Z
     e3a:	71 81       	ldd	r23, Z+1	; 0x01
     e3c:	88 27       	eor	r24, r24
     e3e:	77 fd       	sbrc	r23, 7
     e40:	80 95       	com	r24
     e42:	98 2f       	mov	r25, r24
     e44:	0e 5f       	subi	r16, 0xFE	; 254
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	4f e6       	ldi	r20, 0x6F	; 111
     e4a:	b4 2e       	mov	r11, r20
     e4c:	b2 22       	and	r11, r18
     e4e:	97 ff       	sbrs	r25, 7
     e50:	09 c0       	rjmp	.+18     	; 0xe64 <vfprintf+0x21a>
     e52:	90 95       	com	r25
     e54:	80 95       	com	r24
     e56:	70 95       	com	r23
     e58:	61 95       	neg	r22
     e5a:	7f 4f       	sbci	r23, 0xFF	; 255
     e5c:	8f 4f       	sbci	r24, 0xFF	; 255
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	f0 e8       	ldi	r31, 0x80	; 128
     e62:	bf 2a       	or	r11, r31
     e64:	a2 01       	movw	r20, r4
     e66:	2a e0       	ldi	r18, 0x0A	; 10
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	0e 94 4e 08 	call	0x109c	; 0x109c <__ultoa_invert>
     e6e:	78 2e       	mov	r7, r24
     e70:	74 18       	sub	r7, r4
     e72:	45 c0       	rjmp	.+138    	; 0xefe <vfprintf+0x2b4>
     e74:	85 37       	cpi	r24, 0x75	; 117
     e76:	31 f4       	brne	.+12     	; 0xe84 <vfprintf+0x23a>
     e78:	3f ee       	ldi	r19, 0xEF	; 239
     e7a:	b3 2e       	mov	r11, r19
     e7c:	b2 22       	and	r11, r18
     e7e:	2a e0       	ldi	r18, 0x0A	; 10
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	25 c0       	rjmp	.+74     	; 0xece <vfprintf+0x284>
     e84:	99 ef       	ldi	r25, 0xF9	; 249
     e86:	b9 2e       	mov	r11, r25
     e88:	b2 22       	and	r11, r18
     e8a:	8f 36       	cpi	r24, 0x6F	; 111
     e8c:	c1 f0       	breq	.+48     	; 0xebe <vfprintf+0x274>
     e8e:	80 37       	cpi	r24, 0x70	; 112
     e90:	20 f4       	brcc	.+8      	; 0xe9a <vfprintf+0x250>
     e92:	88 35       	cpi	r24, 0x58	; 88
     e94:	09 f0       	breq	.+2      	; 0xe98 <vfprintf+0x24e>
     e96:	b5 c0       	rjmp	.+362    	; 0x1002 <vfprintf+0x3b8>
     e98:	0d c0       	rjmp	.+26     	; 0xeb4 <vfprintf+0x26a>
     e9a:	80 37       	cpi	r24, 0x70	; 112
     e9c:	21 f0       	breq	.+8      	; 0xea6 <vfprintf+0x25c>
     e9e:	88 37       	cpi	r24, 0x78	; 120
     ea0:	09 f0       	breq	.+2      	; 0xea4 <vfprintf+0x25a>
     ea2:	af c0       	rjmp	.+350    	; 0x1002 <vfprintf+0x3b8>
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <vfprintf+0x260>
     ea6:	20 e1       	ldi	r18, 0x10	; 16
     ea8:	b2 2a       	or	r11, r18
     eaa:	b4 fe       	sbrs	r11, 4
     eac:	0b c0       	rjmp	.+22     	; 0xec4 <vfprintf+0x27a>
     eae:	84 e0       	ldi	r24, 0x04	; 4
     eb0:	b8 2a       	or	r11, r24
     eb2:	08 c0       	rjmp	.+16     	; 0xec4 <vfprintf+0x27a>
     eb4:	b4 fe       	sbrs	r11, 4
     eb6:	09 c0       	rjmp	.+18     	; 0xeca <vfprintf+0x280>
     eb8:	e6 e0       	ldi	r30, 0x06	; 6
     eba:	be 2a       	or	r11, r30
     ebc:	06 c0       	rjmp	.+12     	; 0xeca <vfprintf+0x280>
     ebe:	28 e0       	ldi	r18, 0x08	; 8
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	05 c0       	rjmp	.+10     	; 0xece <vfprintf+0x284>
     ec4:	20 e1       	ldi	r18, 0x10	; 16
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	02 c0       	rjmp	.+4      	; 0xece <vfprintf+0x284>
     eca:	20 e1       	ldi	r18, 0x10	; 16
     ecc:	32 e0       	ldi	r19, 0x02	; 2
     ece:	b7 fe       	sbrs	r11, 7
     ed0:	08 c0       	rjmp	.+16     	; 0xee2 <vfprintf+0x298>
     ed2:	f8 01       	movw	r30, r16
     ed4:	60 81       	ld	r22, Z
     ed6:	71 81       	ldd	r23, Z+1	; 0x01
     ed8:	82 81       	ldd	r24, Z+2	; 0x02
     eda:	93 81       	ldd	r25, Z+3	; 0x03
     edc:	0c 5f       	subi	r16, 0xFC	; 252
     ede:	1f 4f       	sbci	r17, 0xFF	; 255
     ee0:	07 c0       	rjmp	.+14     	; 0xef0 <vfprintf+0x2a6>
     ee2:	f8 01       	movw	r30, r16
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 5f       	subi	r16, 0xFE	; 254
     eee:	1f 4f       	sbci	r17, 0xFF	; 255
     ef0:	a2 01       	movw	r20, r4
     ef2:	0e 94 4e 08 	call	0x109c	; 0x109c <__ultoa_invert>
     ef6:	78 2e       	mov	r7, r24
     ef8:	74 18       	sub	r7, r4
     efa:	ff e7       	ldi	r31, 0x7F	; 127
     efc:	bf 22       	and	r11, r31
     efe:	b6 fe       	sbrs	r11, 6
     f00:	0b c0       	rjmp	.+22     	; 0xf18 <vfprintf+0x2ce>
     f02:	2e ef       	ldi	r18, 0xFE	; 254
     f04:	b2 22       	and	r11, r18
     f06:	7e 14       	cp	r7, r14
     f08:	38 f4       	brcc	.+14     	; 0xf18 <vfprintf+0x2ce>
     f0a:	b4 fe       	sbrs	r11, 4
     f0c:	07 c0       	rjmp	.+14     	; 0xf1c <vfprintf+0x2d2>
     f0e:	b2 fc       	sbrc	r11, 2
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <vfprintf+0x2d2>
     f12:	8f ee       	ldi	r24, 0xEF	; 239
     f14:	b8 22       	and	r11, r24
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <vfprintf+0x2d2>
     f18:	a7 2c       	mov	r10, r7
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <vfprintf+0x2d4>
     f1c:	ae 2c       	mov	r10, r14
     f1e:	8b 2d       	mov	r24, r11
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	b4 fe       	sbrs	r11, 4
     f24:	0d c0       	rjmp	.+26     	; 0xf40 <vfprintf+0x2f6>
     f26:	fe 01       	movw	r30, r28
     f28:	e7 0d       	add	r30, r7
     f2a:	f1 1d       	adc	r31, r1
     f2c:	20 81       	ld	r18, Z
     f2e:	20 33       	cpi	r18, 0x30	; 48
     f30:	19 f4       	brne	.+6      	; 0xf38 <vfprintf+0x2ee>
     f32:	e9 ee       	ldi	r30, 0xE9	; 233
     f34:	be 22       	and	r11, r30
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <vfprintf+0x300>
     f38:	a3 94       	inc	r10
     f3a:	b2 fe       	sbrs	r11, 2
     f3c:	06 c0       	rjmp	.+12     	; 0xf4a <vfprintf+0x300>
     f3e:	04 c0       	rjmp	.+8      	; 0xf48 <vfprintf+0x2fe>
     f40:	86 78       	andi	r24, 0x86	; 134
     f42:	90 70       	andi	r25, 0x00	; 0
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	09 f0       	breq	.+2      	; 0xf4a <vfprintf+0x300>
     f48:	a3 94       	inc	r10
     f4a:	8b 2c       	mov	r8, r11
     f4c:	99 24       	eor	r9, r9
     f4e:	b3 fc       	sbrc	r11, 3
     f50:	14 c0       	rjmp	.+40     	; 0xf7a <vfprintf+0x330>
     f52:	b0 fe       	sbrs	r11, 0
     f54:	0f c0       	rjmp	.+30     	; 0xf74 <vfprintf+0x32a>
     f56:	af 14       	cp	r10, r15
     f58:	28 f4       	brcc	.+10     	; 0xf64 <vfprintf+0x31a>
     f5a:	e7 2c       	mov	r14, r7
     f5c:	ef 0c       	add	r14, r15
     f5e:	ea 18       	sub	r14, r10
     f60:	af 2c       	mov	r10, r15
     f62:	08 c0       	rjmp	.+16     	; 0xf74 <vfprintf+0x32a>
     f64:	e7 2c       	mov	r14, r7
     f66:	06 c0       	rjmp	.+12     	; 0xf74 <vfprintf+0x32a>
     f68:	80 e2       	ldi	r24, 0x20	; 32
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	b6 01       	movw	r22, r12
     f6e:	0e 94 22 08 	call	0x1044	; 0x1044 <fputc>
     f72:	a3 94       	inc	r10
     f74:	af 14       	cp	r10, r15
     f76:	c0 f3       	brcs	.-16     	; 0xf68 <vfprintf+0x31e>
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <vfprintf+0x338>
     f7a:	af 14       	cp	r10, r15
     f7c:	10 f4       	brcc	.+4      	; 0xf82 <vfprintf+0x338>
     f7e:	fa 18       	sub	r15, r10
     f80:	01 c0       	rjmp	.+2      	; 0xf84 <vfprintf+0x33a>
     f82:	ff 24       	eor	r15, r15
     f84:	84 fe       	sbrs	r8, 4
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <vfprintf+0x35c>
     f88:	80 e3       	ldi	r24, 0x30	; 48
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	b6 01       	movw	r22, r12
     f8e:	0e 94 22 08 	call	0x1044	; 0x1044 <fputc>
     f92:	82 fe       	sbrs	r8, 2
     f94:	1f c0       	rjmp	.+62     	; 0xfd4 <vfprintf+0x38a>
     f96:	81 fe       	sbrs	r8, 1
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <vfprintf+0x356>
     f9a:	88 e5       	ldi	r24, 0x58	; 88
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	10 c0       	rjmp	.+32     	; 0xfc0 <vfprintf+0x376>
     fa0:	88 e7       	ldi	r24, 0x78	; 120
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0d c0       	rjmp	.+26     	; 0xfc0 <vfprintf+0x376>
     fa6:	c4 01       	movw	r24, r8
     fa8:	86 78       	andi	r24, 0x86	; 134
     faa:	90 70       	andi	r25, 0x00	; 0
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	91 f0       	breq	.+36     	; 0xfd4 <vfprintf+0x38a>
     fb0:	81 fc       	sbrc	r8, 1
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <vfprintf+0x36e>
     fb4:	80 e2       	ldi	r24, 0x20	; 32
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <vfprintf+0x370>
     fb8:	8b e2       	ldi	r24, 0x2B	; 43
     fba:	b7 fc       	sbrc	r11, 7
     fbc:	8d e2       	ldi	r24, 0x2D	; 45
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	b6 01       	movw	r22, r12
     fc2:	0e 94 22 08 	call	0x1044	; 0x1044 <fputc>
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <vfprintf+0x38a>
     fc8:	80 e3       	ldi	r24, 0x30	; 48
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	b6 01       	movw	r22, r12
     fce:	0e 94 22 08 	call	0x1044	; 0x1044 <fputc>
     fd2:	ea 94       	dec	r14
     fd4:	7e 14       	cp	r7, r14
     fd6:	c0 f3       	brcs	.-16     	; 0xfc8 <vfprintf+0x37e>
     fd8:	7a 94       	dec	r7
     fda:	f2 01       	movw	r30, r4
     fdc:	e7 0d       	add	r30, r7
     fde:	f1 1d       	adc	r31, r1
     fe0:	80 81       	ld	r24, Z
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	b6 01       	movw	r22, r12
     fe6:	0e 94 22 08 	call	0x1044	; 0x1044 <fputc>
     fea:	77 20       	and	r7, r7
     fec:	a9 f7       	brne	.-22     	; 0xfd8 <vfprintf+0x38e>
     fee:	06 c0       	rjmp	.+12     	; 0xffc <vfprintf+0x3b2>
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	b6 01       	movw	r22, r12
     ff6:	0e 94 22 08 	call	0x1044	; 0x1044 <fputc>
     ffa:	fa 94       	dec	r15
     ffc:	ff 20       	and	r15, r15
     ffe:	c1 f7       	brne	.-16     	; 0xff0 <vfprintf+0x3a6>
    1000:	37 ce       	rjmp	.-914    	; 0xc70 <vfprintf+0x26>
    1002:	f6 01       	movw	r30, r12
    1004:	26 81       	ldd	r18, Z+6	; 0x06
    1006:	37 81       	ldd	r19, Z+7	; 0x07
    1008:	02 c0       	rjmp	.+4      	; 0x100e <vfprintf+0x3c4>
    100a:	2f ef       	ldi	r18, 0xFF	; 255
    100c:	3f ef       	ldi	r19, 0xFF	; 255
    100e:	c9 01       	movw	r24, r18
    1010:	2c 96       	adiw	r28, 0x0c	; 12
    1012:	e2 e1       	ldi	r30, 0x12	; 18
    1014:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__epilogue_restores__>

00001018 <strnlen_P>:
    1018:	fc 01       	movw	r30, r24
    101a:	05 90       	lpm	r0, Z+
    101c:	61 50       	subi	r22, 0x01	; 1
    101e:	70 40       	sbci	r23, 0x00	; 0
    1020:	01 10       	cpse	r0, r1
    1022:	d8 f7       	brcc	.-10     	; 0x101a <strnlen_P+0x2>
    1024:	80 95       	com	r24
    1026:	90 95       	com	r25
    1028:	8e 0f       	add	r24, r30
    102a:	9f 1f       	adc	r25, r31
    102c:	08 95       	ret

0000102e <strnlen>:
    102e:	fc 01       	movw	r30, r24
    1030:	61 50       	subi	r22, 0x01	; 1
    1032:	70 40       	sbci	r23, 0x00	; 0
    1034:	01 90       	ld	r0, Z+
    1036:	01 10       	cpse	r0, r1
    1038:	d8 f7       	brcc	.-10     	; 0x1030 <strnlen+0x2>
    103a:	80 95       	com	r24
    103c:	90 95       	com	r25
    103e:	8e 0f       	add	r24, r30
    1040:	9f 1f       	adc	r25, r31
    1042:	08 95       	ret

00001044 <fputc>:
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	8c 01       	movw	r16, r24
    104e:	eb 01       	movw	r28, r22
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	81 ff       	sbrs	r24, 1
    1054:	1b c0       	rjmp	.+54     	; 0x108c <fputc+0x48>
    1056:	82 ff       	sbrs	r24, 2
    1058:	0d c0       	rjmp	.+26     	; 0x1074 <fputc+0x30>
    105a:	2e 81       	ldd	r18, Y+6	; 0x06
    105c:	3f 81       	ldd	r19, Y+7	; 0x07
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	28 17       	cp	r18, r24
    1064:	39 07       	cpc	r19, r25
    1066:	64 f4       	brge	.+24     	; 0x1080 <fputc+0x3c>
    1068:	e8 81       	ld	r30, Y
    106a:	f9 81       	ldd	r31, Y+1	; 0x01
    106c:	01 93       	st	Z+, r16
    106e:	f9 83       	std	Y+1, r31	; 0x01
    1070:	e8 83       	st	Y, r30
    1072:	06 c0       	rjmp	.+12     	; 0x1080 <fputc+0x3c>
    1074:	e8 85       	ldd	r30, Y+8	; 0x08
    1076:	f9 85       	ldd	r31, Y+9	; 0x09
    1078:	80 2f       	mov	r24, r16
    107a:	09 95       	icall
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	31 f4       	brne	.+12     	; 0x108c <fputc+0x48>
    1080:	8e 81       	ldd	r24, Y+6	; 0x06
    1082:	9f 81       	ldd	r25, Y+7	; 0x07
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	9f 83       	std	Y+7, r25	; 0x07
    1088:	8e 83       	std	Y+6, r24	; 0x06
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <fputc+0x4c>
    108c:	0f ef       	ldi	r16, 0xFF	; 255
    108e:	1f ef       	ldi	r17, 0xFF	; 255
    1090:	c8 01       	movw	r24, r16
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	08 95       	ret

0000109c <__ultoa_invert>:
    109c:	fa 01       	movw	r30, r20
    109e:	aa 27       	eor	r26, r26
    10a0:	28 30       	cpi	r18, 0x08	; 8
    10a2:	51 f1       	breq	.+84     	; 0x10f8 <__ultoa_invert+0x5c>
    10a4:	20 31       	cpi	r18, 0x10	; 16
    10a6:	81 f1       	breq	.+96     	; 0x1108 <__ultoa_invert+0x6c>
    10a8:	e8 94       	clt
    10aa:	6f 93       	push	r22
    10ac:	6e 7f       	andi	r22, 0xFE	; 254
    10ae:	6e 5f       	subi	r22, 0xFE	; 254
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255
    10b2:	8f 4f       	sbci	r24, 0xFF	; 255
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	af 4f       	sbci	r26, 0xFF	; 255
    10b8:	b1 e0       	ldi	r27, 0x01	; 1
    10ba:	3e d0       	rcall	.+124    	; 0x1138 <__ultoa_invert+0x9c>
    10bc:	b4 e0       	ldi	r27, 0x04	; 4
    10be:	3c d0       	rcall	.+120    	; 0x1138 <__ultoa_invert+0x9c>
    10c0:	67 0f       	add	r22, r23
    10c2:	78 1f       	adc	r23, r24
    10c4:	89 1f       	adc	r24, r25
    10c6:	9a 1f       	adc	r25, r26
    10c8:	a1 1d       	adc	r26, r1
    10ca:	68 0f       	add	r22, r24
    10cc:	79 1f       	adc	r23, r25
    10ce:	8a 1f       	adc	r24, r26
    10d0:	91 1d       	adc	r25, r1
    10d2:	a1 1d       	adc	r26, r1
    10d4:	6a 0f       	add	r22, r26
    10d6:	71 1d       	adc	r23, r1
    10d8:	81 1d       	adc	r24, r1
    10da:	91 1d       	adc	r25, r1
    10dc:	a1 1d       	adc	r26, r1
    10de:	20 d0       	rcall	.+64     	; 0x1120 <__ultoa_invert+0x84>
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <__ultoa_invert+0x48>
    10e2:	68 94       	set
    10e4:	3f 91       	pop	r19
    10e6:	2a e0       	ldi	r18, 0x0A	; 10
    10e8:	26 9f       	mul	r18, r22
    10ea:	11 24       	eor	r1, r1
    10ec:	30 19       	sub	r19, r0
    10ee:	30 5d       	subi	r19, 0xD0	; 208
    10f0:	31 93       	st	Z+, r19
    10f2:	de f6       	brtc	.-74     	; 0x10aa <__ultoa_invert+0xe>
    10f4:	cf 01       	movw	r24, r30
    10f6:	08 95       	ret
    10f8:	46 2f       	mov	r20, r22
    10fa:	47 70       	andi	r20, 0x07	; 7
    10fc:	40 5d       	subi	r20, 0xD0	; 208
    10fe:	41 93       	st	Z+, r20
    1100:	b3 e0       	ldi	r27, 0x03	; 3
    1102:	0f d0       	rcall	.+30     	; 0x1122 <__ultoa_invert+0x86>
    1104:	c9 f7       	brne	.-14     	; 0x10f8 <__ultoa_invert+0x5c>
    1106:	f6 cf       	rjmp	.-20     	; 0x10f4 <__ultoa_invert+0x58>
    1108:	46 2f       	mov	r20, r22
    110a:	4f 70       	andi	r20, 0x0F	; 15
    110c:	40 5d       	subi	r20, 0xD0	; 208
    110e:	4a 33       	cpi	r20, 0x3A	; 58
    1110:	18 f0       	brcs	.+6      	; 0x1118 <__ultoa_invert+0x7c>
    1112:	49 5d       	subi	r20, 0xD9	; 217
    1114:	31 fd       	sbrc	r19, 1
    1116:	40 52       	subi	r20, 0x20	; 32
    1118:	41 93       	st	Z+, r20
    111a:	02 d0       	rcall	.+4      	; 0x1120 <__ultoa_invert+0x84>
    111c:	a9 f7       	brne	.-22     	; 0x1108 <__ultoa_invert+0x6c>
    111e:	ea cf       	rjmp	.-44     	; 0x10f4 <__ultoa_invert+0x58>
    1120:	b4 e0       	ldi	r27, 0x04	; 4
    1122:	a6 95       	lsr	r26
    1124:	97 95       	ror	r25
    1126:	87 95       	ror	r24
    1128:	77 95       	ror	r23
    112a:	67 95       	ror	r22
    112c:	ba 95       	dec	r27
    112e:	c9 f7       	brne	.-14     	; 0x1122 <__ultoa_invert+0x86>
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	61 05       	cpc	r22, r1
    1134:	71 05       	cpc	r23, r1
    1136:	08 95       	ret
    1138:	9b 01       	movw	r18, r22
    113a:	ac 01       	movw	r20, r24
    113c:	0a 2e       	mov	r0, r26
    113e:	06 94       	lsr	r0
    1140:	57 95       	ror	r21
    1142:	47 95       	ror	r20
    1144:	37 95       	ror	r19
    1146:	27 95       	ror	r18
    1148:	ba 95       	dec	r27
    114a:	c9 f7       	brne	.-14     	; 0x113e <__ultoa_invert+0xa2>
    114c:	62 0f       	add	r22, r18
    114e:	73 1f       	adc	r23, r19
    1150:	84 1f       	adc	r24, r20
    1152:	95 1f       	adc	r25, r21
    1154:	a0 1d       	adc	r26, r0
    1156:	08 95       	ret

00001158 <__prologue_saves__>:
    1158:	2f 92       	push	r2
    115a:	3f 92       	push	r3
    115c:	4f 92       	push	r4
    115e:	5f 92       	push	r5
    1160:	6f 92       	push	r6
    1162:	7f 92       	push	r7
    1164:	8f 92       	push	r8
    1166:	9f 92       	push	r9
    1168:	af 92       	push	r10
    116a:	bf 92       	push	r11
    116c:	cf 92       	push	r12
    116e:	df 92       	push	r13
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	ca 1b       	sub	r28, r26
    1182:	db 0b       	sbc	r29, r27
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	09 94       	ijmp

00001190 <__epilogue_restores__>:
    1190:	2a 88       	ldd	r2, Y+18	; 0x12
    1192:	39 88       	ldd	r3, Y+17	; 0x11
    1194:	48 88       	ldd	r4, Y+16	; 0x10
    1196:	5f 84       	ldd	r5, Y+15	; 0x0f
    1198:	6e 84       	ldd	r6, Y+14	; 0x0e
    119a:	7d 84       	ldd	r7, Y+13	; 0x0d
    119c:	8c 84       	ldd	r8, Y+12	; 0x0c
    119e:	9b 84       	ldd	r9, Y+11	; 0x0b
    11a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    11a2:	b9 84       	ldd	r11, Y+9	; 0x09
    11a4:	c8 84       	ldd	r12, Y+8	; 0x08
    11a6:	df 80       	ldd	r13, Y+7	; 0x07
    11a8:	ee 80       	ldd	r14, Y+6	; 0x06
    11aa:	fd 80       	ldd	r15, Y+5	; 0x05
    11ac:	0c 81       	ldd	r16, Y+4	; 0x04
    11ae:	1b 81       	ldd	r17, Y+3	; 0x03
    11b0:	aa 81       	ldd	r26, Y+2	; 0x02
    11b2:	b9 81       	ldd	r27, Y+1	; 0x01
    11b4:	ce 0f       	add	r28, r30
    11b6:	d1 1d       	adc	r29, r1
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	ed 01       	movw	r28, r26
    11c4:	08 95       	ret

000011c6 <_exit>:
    11c6:	f8 94       	cli

000011c8 <__stop_program>:
    11c8:	ff cf       	rjmp	.-2      	; 0x11c8 <__stop_program>
